{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\barstool\\\\boxscore-widget\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass PlayerContainer extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"player-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass GameContainer extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass Boxscore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStatus: '',\n      league: '',\n      gameInfo: {},\n      playerInfo: {}\n    };\n  }\n\n  async getJson(url) {\n    // let data = await fetchUrlData(url);\n    this.setState({\n      gameStatus: '',\n      league: '',\n      scoreInfo: {},\n      playerInfo: {}\n    });\n  }\n\n  async getGameInfo(leagueType) {\n    const gameInfo = await getGameInfo(leagueType);\n    const gameScore = await getGameScore(leagueType);\n    let stateObj = {\n      league: leagueType\n    };\n    stateObj.gameStatus = gameInfo.status;\n    console.log(gameScore);\n  }\n\n  render() {\n    // This is how you get data\n    // setTimeout(() => {\n    //     this.getJson('/api/games/nba?stats=home_team');\n    // }, 5000);\n    this.getGameInfo('MLB');\n    return React.createElement(\"div\", {\n      className: \"boxscore-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(GameContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(PlayerContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Boxscore, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n}), document.getElementById('root'));\n/* ========== HELPER FUNCTIONS ========== */\n\nfunction getGameInfo(leagueType) {\n  const apiEndpoint = apiURLConstructor(leagueType, 'event_information');\n  return fetchUrlData(apiEndpoint);\n}\n\nasync function getGameScore(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, 'home_period_scores');\n  const awayEndpoint = apiURLConstructor(leagueType, 'away_period_scores');\n  const homeData = await fetchUrlData(homeEndpoint);\n  const awayData = await fetchUrlData(awayEndpoint);\n  const returnObj = {\n    home: homeData.resolve(),\n    away: awayData.resolve()\n  };\n  return returnObj;\n}\n/**\n * @name fetchUrlData\n * @param {String} url API endpoint to hit\n * @returns {void}\n */\n\n\nfunction fetchUrlData(url) {\n  return new Promise((res, rej) => {\n    // Get our endpoint data\n    fetch(url).then(resp => {\n      // If it came back propertly, return it\n      if (resp.status === 200) {\n        res(resp.json()); // Otherwise send the error\n      } else {\n        rej(resp.statusText);\n      }\n    }).catch(err => {\n      rej(err);\n    });\n  });\n}\n/**\n * @name apiURLConstructor\n * @param {String} league NBA vs. MLB\n * @param {String} typeOfStat What aggregator stat would you like\n */\n\n\nfunction apiURLConstructor(league, typeOfStat) {\n  let baseURL = '/api/games';\n  const acceptedStats = {\n    away_team: true,\n    home_team: true,\n    away_period_scores: true,\n    home_period_scores: true,\n    away_stats: true,\n    home_stats: true,\n    officials: true,\n    event_information: true,\n    away_totals: true,\n    home_totals: true\n  };\n\n  if (league) {\n    baseURL += \"/\".concat(league.toUpperCase());\n  }\n\n  if (typeOfStat && acceptedStats[typeOfStat]) {\n    baseURL += \"?stats=\".concat(typeOfStat);\n  }\n\n  return baseURL;\n}","map":{"version":3,"sources":["C:\\workspace\\barstool\\boxscore-widget\\client\\src\\index.js"],"names":["React","ReactDOM","PlayerContainer","Component","render","GameContainer","Boxscore","constructor","props","state","gameStatus","league","gameInfo","playerInfo","getJson","url","setState","scoreInfo","getGameInfo","leagueType","gameScore","getGameScore","stateObj","status","console","log","document","getElementById","apiEndpoint","apiURLConstructor","fetchUrlData","homeEndpoint","awayEndpoint","homeData","awayData","returnObj","home","resolve","away","Promise","res","rej","fetch","then","resp","json","statusText","catch","err","typeOfStat","baseURL","acceptedStats","away_team","home_team","away_period_scores","home_period_scores","away_stats","home_stats","officials","event_information","away_totals","home_totals","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass PlayerContainer extends React.Component {\n    render() {\n        return (\n            <div className=\"player-container\">\n            </div>\n        );\n    }\n}\n\nclass GameContainer extends React.Component {\n    render() {\n        return (\n            <div className=\"game-container\">\n            </div>\n        );\n    }\n}\n\nclass Boxscore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameStatus: '',\n            league: '',\n            gameInfo: {},\n            playerInfo: {}\n        }\n    }\n\n    async getJson(url) {\n        // let data = await fetchUrlData(url);\n        \n        this.setState({\n            gameStatus: '',\n            league: '',\n            scoreInfo: {},\n            playerInfo: {}\n        });\n    }\n\n    async getGameInfo(leagueType) {\n        const gameInfo = await getGameInfo(leagueType);\n        const gameScore = await getGameScore(leagueType)\n        let stateObj = {\n            league: leagueType\n        };\n\n        stateObj.gameStatus = gameInfo.status;\n        console.log(gameScore);\n    }\n\n    render() {\n        // This is how you get data\n        // setTimeout(() => {\n        //     this.getJson('/api/games/nba?stats=home_team');\n        // }, 5000);\n        this.getGameInfo('MLB');\n\n        return (\n            <div className=\"boxscore-container\">\n                <GameContainer />\n                <PlayerContainer />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Boxscore />,\n    document.getElementById('root')\n);\n\n/* ========== HELPER FUNCTIONS ========== */\n\nfunction getGameInfo(leagueType) {\n    const apiEndpoint = apiURLConstructor(leagueType, 'event_information')\n\n    return fetchUrlData(apiEndpoint);\n}\n\nasync function getGameScore(leagueType) {\n    const homeEndpoint = apiURLConstructor(leagueType, 'home_period_scores');\n    const awayEndpoint = apiURLConstructor(leagueType, 'away_period_scores');\n    const homeData = await fetchUrlData(homeEndpoint);\n    const awayData = await fetchUrlData(awayEndpoint);\n    const returnObj = {\n        home: homeData.resolve(),\n        away: awayData.resolve()\n    }\n\n    return returnObj;\n}\n\n/**\n * @name fetchUrlData\n * @param {String} url API endpoint to hit\n * @returns {void}\n */\nfunction fetchUrlData(url) {\n    return new Promise((res, rej) => {\n        // Get our endpoint data\n        fetch(url)\n            .then((resp) => {\n                // If it came back propertly, return it\n                if (resp.status === 200) {\n                    res(resp.json());\n                // Otherwise send the error\n                } else {\n                    rej(resp.statusText);\n                }\n            })\n            .catch((err) => {\n                rej(err);\n            });\n    });\n}\n\n/**\n * @name apiURLConstructor\n * @param {String} league NBA vs. MLB\n * @param {String} typeOfStat What aggregator stat would you like\n */\nfunction apiURLConstructor(league, typeOfStat) {\n    let baseURL = '/api/games';\n    const acceptedStats = {\n        away_team: true,\n        home_team: true,\n        away_period_scores: true,\n        home_period_scores: true,\n        away_stats: true,\n        home_stats: true,\n        officials: true,\n        event_information: true,\n        away_totals: true,\n        home_totals: true\n    }\n\n    if (league) {\n        baseURL += `/${league.toUpperCase()}`;\n    }\n\n    if (typeOfStat && acceptedStats[typeOfStat]) {\n        baseURL += `?stats=${typeOfStat}`;\n    }\n\n    return baseURL;\n}"]},"metadata":{},"sourceType":"module"}