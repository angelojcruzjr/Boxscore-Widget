{"ast":null,"code":"function constructLocObj(obj) {\n  return {\n    name: \"\".concat(obj.city, \", \").concat(obj.state),\n    stadium: obj.name\n  };\n}\n/**\r\n * @name fetchUrlData\r\n * @param {String} url API endpoint to hit\r\n * @returns {void}\r\n */\n\n\nfunction fetchUrlData(url) {\n  return new Promise((res, rej) => {\n    // Get our endpoint data\n    fetch(url).then(resp => {\n      // If it came back propertly, return it\n      if (resp.status === 200) {\n        res(resp.json()); // Otherwise send the error\n      } else {\n        rej(resp.statusText);\n      }\n    }).catch(err => {\n      rej(err);\n    });\n  });\n}\n/**\r\n * @name apiURLConstructor\r\n * @param {String} league NBA vs. MLB\r\n * @param {String} typeOfStat What aggregator stat would you like\r\n */\n\n\nfunction apiURLConstructor(league, typeOfStat) {\n  let baseURL = '/api/games';\n\n  if (league) {\n    baseURL += \"/\".concat(league.toUpperCase());\n  }\n\n  if (typeOfStat) {\n    baseURL += \"?stats=\".concat(typeOfStat);\n  }\n\n  return baseURL;\n}\n\nfunction capitalizeString(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction constructTeamObj(obj) {\n  return {\n    name: obj.full_name,\n    abbv: obj.abbreviation\n  };\n}\n\nfunction statComparison(a, b, stat) {\n  if (b[stat] > a[stat]) {\n    return 1;\n  } else if (a[stat] > b[stat]) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction getNHighestTotals(arr1, arr2, stat, n) {\n  const totalPlayers = arr1.concat(arr2);\n  return totalPlayers.sort((a, b) => statComparison(a, b, stat)).slice().filter((val, i) => {\n    return i < n;\n  });\n}\n\nmodule.exports = {\n  capitalizeString: capitalizeString,\n  apiURLConstructor: apiURLConstructor,\n  fetchUrlData: fetchUrlData,\n  constructLocObj: constructLocObj,\n  constructTeamObj: constructTeamObj,\n  statComparison: statComparison,\n  getNHighestTotals: getNHighestTotals\n};","map":{"version":3,"sources":["C:\\workspace\\barstool\\boxscore-widget\\client\\src\\utils.js"],"names":["constructLocObj","obj","name","city","state","stadium","fetchUrlData","url","Promise","res","rej","fetch","then","resp","status","json","statusText","catch","err","apiURLConstructor","league","typeOfStat","baseURL","toUpperCase","capitalizeString","str","charAt","slice","constructTeamObj","full_name","abbv","abbreviation","statComparison","a","b","stat","getNHighestTotals","arr1","arr2","n","totalPlayers","concat","sort","filter","val","i","module","exports"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B,SAAO;AACHC,IAAAA,IAAI,YAAKD,GAAG,CAACE,IAAT,eAAkBF,GAAG,CAACG,KAAtB,CADD;AAEHC,IAAAA,OAAO,EAAEJ,GAAG,CAACC;AAFV,GAAP;AAIH;AAED;;;;;;;AAKA,SAASI,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,SAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B;AACAC,IAAAA,KAAK,CAACJ,GAAD,CAAL,CACKK,IADL,CACWC,IAAD,IAAU;AACZ;AACA,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBL,QAAAA,GAAG,CAACI,IAAI,CAACE,IAAL,EAAD,CAAH,CADqB,CAEzB;AACC,OAHD,MAGO;AACHL,QAAAA,GAAG,CAACG,IAAI,CAACG,UAAN,CAAH;AACH;AACJ,KATL,EAUKC,KAVL,CAUYC,GAAD,IAAS;AACZR,MAAAA,GAAG,CAACQ,GAAD,CAAH;AACH,KAZL;AAaH,GAfM,CAAP;AAgBH;AAED;;;;;;;AAKA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,UAAnC,EAA+C;AAC3C,MAAIC,OAAO,GAAG,YAAd;;AAEA,MAAIF,MAAJ,EAAY;AACRE,IAAAA,OAAO,eAAQF,MAAM,CAACG,WAAP,EAAR,CAAP;AACH;;AAED,MAAIF,UAAJ,EAAgB;AACZC,IAAAA,OAAO,qBAAcD,UAAd,CAAP;AACH;;AAED,SAAOC,OAAP;AACH;;AAED,SAASE,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,SAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcH,WAAd,KAA8BE,GAAG,CAACE,KAAJ,CAAU,CAAV,CAArC;AACH;;AAED,SAASC,gBAAT,CAA0B3B,GAA1B,EAA+B;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAED,GAAG,CAAC4B,SADP;AAEHC,IAAAA,IAAI,EAAE7B,GAAG,CAAC8B;AAFP,GAAP;AAIH;;AAED,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,IAA9B,EAAoC;AAChC,MAAID,CAAC,CAACC,IAAD,CAAD,GAAUF,CAAC,CAACE,IAAD,CAAf,EAAuB;AACnB,WAAO,CAAP;AACH,GAFD,MAEO,IAAIF,CAAC,CAACE,IAAD,CAAD,GAAUD,CAAC,CAACC,IAAD,CAAf,EAAuB;AAC1B,WAAO,CAAC,CAAR;AACH,GAFM,MAEA;AACH,WAAO,CAAP;AACH;AACJ;;AAED,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCH,IAAvC,EAA6CI,CAA7C,EAAgD;AAC5C,QAAMC,YAAY,GAAGH,IAAI,CAACI,MAAL,CAAYH,IAAZ,CAArB;AAEA,SAAOE,YAAY,CACdE,IADE,CACG,CAACT,CAAD,EAAIC,CAAJ,KAAUF,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAP,CAD3B,EAEFR,KAFE,GAGFgB,MAHE,CAGK,CAACC,GAAD,EAAMC,CAAN,KAAY;AAChB,WAAOA,CAAC,GAAGN,CAAX;AACH,GALE,CAAP;AAMH;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACbvB,EAAAA,gBAAgB,EAAEA,gBADL;AAEbL,EAAAA,iBAAiB,EAAEA,iBAFN;AAGbb,EAAAA,YAAY,EAAEA,YAHD;AAIbN,EAAAA,eAAe,EAAEA,eAJJ;AAKb4B,EAAAA,gBAAgB,EAAEA,gBALL;AAMbI,EAAAA,cAAc,EAAEA,cANH;AAObI,EAAAA,iBAAiB,EAAEA;AAPN,CAAjB","sourcesContent":["function constructLocObj(obj) {\r\n    return {\r\n        name: `${obj.city}, ${obj.state}`,\r\n        stadium: obj.name\r\n    };\r\n}\r\n\r\n/**\r\n * @name fetchUrlData\r\n * @param {String} url API endpoint to hit\r\n * @returns {void}\r\n */\r\nfunction fetchUrlData(url) {\r\n    return new Promise((res, rej) => {\r\n        // Get our endpoint data\r\n        fetch(url)\r\n            .then((resp) => {\r\n                // If it came back propertly, return it\r\n                if (resp.status === 200) {\r\n                    res(resp.json());\r\n                // Otherwise send the error\r\n                } else {\r\n                    rej(resp.statusText);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                rej(err);\r\n            });\r\n    });\r\n}\r\n\r\n/**\r\n * @name apiURLConstructor\r\n * @param {String} league NBA vs. MLB\r\n * @param {String} typeOfStat What aggregator stat would you like\r\n */\r\nfunction apiURLConstructor(league, typeOfStat) {\r\n    let baseURL = '/api/games';\r\n\r\n    if (league) {\r\n        baseURL += `/${league.toUpperCase()}`;\r\n    }\r\n\r\n    if (typeOfStat) {\r\n        baseURL += `?stats=${typeOfStat}`;\r\n    }\r\n\r\n    return baseURL;\r\n}\r\n\r\nfunction capitalizeString(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nfunction constructTeamObj(obj) {\r\n    return {\r\n        name: obj.full_name,\r\n        abbv: obj.abbreviation\r\n    };\r\n}\r\n\r\nfunction statComparison(a, b, stat) {\r\n    if (b[stat] > a[stat]) {\r\n        return 1;\r\n    } else if (a[stat] > b[stat]) {\r\n        return -1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction getNHighestTotals(arr1, arr2, stat, n) {\r\n    const totalPlayers = arr1.concat(arr2);\r\n\r\n    return totalPlayers\r\n        .sort((a, b) => statComparison(a, b, stat))\r\n        .slice()\r\n        .filter((val, i) => {\r\n            return i < n;\r\n        });\r\n}\r\n\r\nmodule.exports = {\r\n    capitalizeString: capitalizeString,\r\n    apiURLConstructor: apiURLConstructor,\r\n    fetchUrlData: fetchUrlData,\r\n    constructLocObj: constructLocObj,\r\n    constructTeamObj: constructTeamObj,\r\n    statComparison: statComparison,\r\n    getNHighestTotals: getNHighestTotals\r\n}"]},"metadata":{},"sourceType":"module"}