{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\barstool\\\\boxscore-widget\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass PlayerContainer extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"player-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass GameContainer extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass Boxscore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStatus: '',\n      league: '',\n      gameInfo: {},\n      playerInfo: {}\n    };\n  }\n\n  async getJson(url) {\n    // let data = await fetchUrlData(url);\n    this.setState({\n      gameStatus: '',\n      league: '',\n      scoreInfo: {},\n      playerInfo: {},\n      teams: {},\n      location: {}\n    });\n  }\n\n  async getGameInfo(leagueType) {\n    const gameInfo = await getGameInfo(leagueType);\n    const gameScore = await getGameScore(leagueType);\n    const teamInfo = await getTeamInfo(leagueType);\n    let stateObj = {\n      league: leagueType\n    };\n    stateObj.gameStatus = gameInfo.status;\n    stateObj.location = gameInfo.location;\n    stateObj.scoreInfo = gameScore;\n    stateObj.teams = teamInfo;\n    console.log(stateObj);\n  }\n\n  render() {\n    // This is how you get data\n    // setTimeout(() => {\n    //     this.getJson('/api/games/nba?stats=home_team');\n    // }, 5000);\n    this.getGameInfo('MLB');\n    return React.createElement(\"div\", {\n      className: \"boxscore-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(GameContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(PlayerContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Boxscore, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n}), document.getElementById('root'));\n/* ========== HELPER FUNCTIONS ========== */\n\nfunction getGameInfo(leagueType) {\n  const apiEndpoint = apiURLConstructor(leagueType, 'event_information');\n  const eventData = fetchUrlData(apiEndpoint);\n  console.log(eventData);\n  const returnObj = {\n    status: eventData.status,\n    location: constructLocObj(eventData.site)\n  };\n  return returnObj;\n}\n\nasync function getGameScore(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, 'home_period_scores');\n  const awayEndpoint = apiURLConstructor(leagueType, 'away_period_scores');\n  const homeData = await fetchUrlData(homeEndpoint);\n  const awayData = await fetchUrlData(awayEndpoint);\n  const returnObj = {\n    home: homeData,\n    away: awayData\n  };\n  return returnObj;\n}\n\nasync function getTeamInfo(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, 'home_team');\n  const awayEndpoint = apiURLConstructor(leagueType, 'away_team');\n  const homeData = await fetchUrlData(homeEndpoint);\n  const awayData = await fetchUrlData(awayEndpoint);\n  const returnObj = {\n    home: constructTeamObj(homeData),\n    away: constructTeamObj(awayData)\n  };\n  return returnObj;\n}\n\nfunction constructTeamObj(obj) {\n  return {\n    name: obj.full_name,\n    abbv: obj.abbreviation\n  };\n}\n\nfunction constructLocObj(obj) {\n  return {\n    name: \"\".concat(obj.city, \", \").concat(obj.state),\n    stadium: obj.name\n  };\n}\n/**\n * @name fetchUrlData\n * @param {String} url API endpoint to hit\n * @returns {void}\n */\n\n\nfunction fetchUrlData(url) {\n  return new Promise((res, rej) => {\n    // Get our endpoint data\n    fetch(url).then(resp => {\n      // If it came back propertly, return it\n      if (resp.status === 200) {\n        res(resp.json()); // Otherwise send the error\n      } else {\n        rej(resp.statusText);\n      }\n    }).catch(err => {\n      rej(err);\n    });\n  });\n}\n/**\n * @name apiURLConstructor\n * @param {String} league NBA vs. MLB\n * @param {String} typeOfStat What aggregator stat would you like\n */\n\n\nfunction apiURLConstructor(league, typeOfStat) {\n  let baseURL = '/api/games';\n  const acceptedStats = {\n    away_team: true,\n    home_team: true,\n    away_period_scores: true,\n    home_period_scores: true,\n    away_stats: true,\n    home_stats: true,\n    officials: true,\n    event_information: true,\n    away_totals: true,\n    home_totals: true\n  };\n\n  if (league) {\n    baseURL += \"/\".concat(league.toUpperCase());\n  }\n\n  if (typeOfStat && acceptedStats[typeOfStat]) {\n    baseURL += \"?stats=\".concat(typeOfStat);\n  }\n\n  return baseURL;\n}","map":{"version":3,"sources":["C:\\workspace\\barstool\\boxscore-widget\\client\\src\\index.js"],"names":["React","ReactDOM","PlayerContainer","Component","render","GameContainer","Boxscore","constructor","props","state","gameStatus","league","gameInfo","playerInfo","getJson","url","setState","scoreInfo","teams","location","getGameInfo","leagueType","gameScore","getGameScore","teamInfo","getTeamInfo","stateObj","status","console","log","document","getElementById","apiEndpoint","apiURLConstructor","eventData","fetchUrlData","returnObj","constructLocObj","site","homeEndpoint","awayEndpoint","homeData","awayData","home","away","constructTeamObj","obj","name","full_name","abbv","abbreviation","city","stadium","Promise","res","rej","fetch","then","resp","json","statusText","catch","err","typeOfStat","baseURL","acceptedStats","away_team","home_team","away_period_scores","home_period_scores","away_stats","home_stats","officials","event_information","away_totals","home_totals","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass PlayerContainer extends React.Component {\n    render() {\n        return (\n            <div className=\"player-container\">\n            </div>\n        );\n    }\n}\n\nclass GameContainer extends React.Component {\n    render() {\n        return (\n            <div className=\"game-container\">\n            </div>\n        );\n    }\n}\n\nclass Boxscore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameStatus: '',\n            league: '',\n            gameInfo: {},\n            playerInfo: {}\n        }\n    }\n\n    async getJson(url) {\n        // let data = await fetchUrlData(url);\n        \n        this.setState({\n            gameStatus: '',\n            league: '',\n            scoreInfo: {},\n            playerInfo: {},\n            teams: {},\n            location: {}\n        });\n    }\n\n    async getGameInfo(leagueType) {\n        const gameInfo = await getGameInfo(leagueType);\n        const gameScore = await getGameScore(leagueType);\n        const teamInfo = await getTeamInfo(leagueType);\n        let stateObj = {\n            league: leagueType\n        };\n\n        stateObj.gameStatus = gameInfo.status;\n        stateObj.location = gameInfo.location;\n        stateObj.scoreInfo = gameScore;\n        stateObj.teams = teamInfo\n        console.log(stateObj);\n    }\n\n    render() {\n        // This is how you get data\n        // setTimeout(() => {\n        //     this.getJson('/api/games/nba?stats=home_team');\n        // }, 5000);\n        this.getGameInfo('MLB');\n\n        return (\n            <div className=\"boxscore-container\">\n                <GameContainer />\n                <PlayerContainer />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Boxscore />,\n    document.getElementById('root')\n);\n\n/* ========== HELPER FUNCTIONS ========== */\n\nfunction getGameInfo(leagueType) {\n    const apiEndpoint = apiURLConstructor(leagueType, 'event_information')\n    const eventData = fetchUrlData(apiEndpoint);\n    console.log(eventData);\n    const returnObj = {\n        status: eventData.status,\n        location: constructLocObj(eventData.site)\n    };\n\n    return returnObj\n}\n\nasync function getGameScore(leagueType) {\n    const homeEndpoint = apiURLConstructor(leagueType, 'home_period_scores');\n    const awayEndpoint = apiURLConstructor(leagueType, 'away_period_scores');\n    const homeData = await fetchUrlData(homeEndpoint);\n    const awayData = await fetchUrlData(awayEndpoint);\n    const returnObj = {\n        home: homeData,\n        away: awayData\n    }\n\n    return returnObj;\n}\n\nasync function getTeamInfo(leagueType) {\n    const homeEndpoint = apiURLConstructor(leagueType, 'home_team');\n    const awayEndpoint = apiURLConstructor(leagueType, 'away_team');\n    const homeData = await fetchUrlData(homeEndpoint);\n    const awayData = await fetchUrlData(awayEndpoint);\n    const returnObj = {\n        home: constructTeamObj(homeData),\n        away: constructTeamObj(awayData)\n    }\n\n    return returnObj;\n}\n\nfunction constructTeamObj(obj) {\n    return {\n        name: obj.full_name,\n        abbv: obj.abbreviation\n    };\n}\n\nfunction constructLocObj(obj) {\n    return {\n        name: `${obj.city}, ${obj.state}`,\n        stadium: obj.name\n    };\n}\n\n/**\n * @name fetchUrlData\n * @param {String} url API endpoint to hit\n * @returns {void}\n */\nfunction fetchUrlData(url) {\n    return new Promise((res, rej) => {\n        // Get our endpoint data\n        fetch(url)\n            .then((resp) => {\n                // If it came back propertly, return it\n                if (resp.status === 200) {\n                    res(resp.json());\n                // Otherwise send the error\n                } else {\n                    rej(resp.statusText);\n                }\n            })\n            .catch((err) => {\n                rej(err);\n            });\n    });\n}\n\n/**\n * @name apiURLConstructor\n * @param {String} league NBA vs. MLB\n * @param {String} typeOfStat What aggregator stat would you like\n */\nfunction apiURLConstructor(league, typeOfStat) {\n    let baseURL = '/api/games';\n    const acceptedStats = {\n        away_team: true,\n        home_team: true,\n        away_period_scores: true,\n        home_period_scores: true,\n        away_stats: true,\n        home_stats: true,\n        officials: true,\n        event_information: true,\n        away_totals: true,\n        home_totals: true\n    }\n\n    if (league) {\n        baseURL += `/${league.toUpperCase()}`;\n    }\n\n    if (typeOfStat && acceptedStats[typeOfStat]) {\n        baseURL += `?stats=${typeOfStat}`;\n    }\n\n    return baseURL;\n}"]},"metadata":{},"sourceType":"module"}