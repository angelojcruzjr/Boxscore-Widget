{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\barstool\\\\boxscore-widget\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as constants from './constants/constants.js';\nimport * as utils from './utils/utils.js';\n/**\n * Player component that shows the names of high\n * performing/players of interest\n */\n\nclass PlayerContainer extends React.Component {\n  /**\n   * @name constructStatPlayer\n   * @param {Object} playerObj Player Object\n   */\n  constructStatPlayer(playerObj) {\n    const stat = constants.playerStats[this.props.league].searchBy;\n    let playerPerformance = '';\n    playerPerformance += \"\".concat(utils.capitalizeString(stat), \": \").concat(playerObj[stat]);\n    return React.createElement(\"div\", {\n      className: \"player-card\",\n      key: utils.generateKey(playerObj.display_name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"stats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"player-divider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, utils.createPlayerName(playerObj.display_name, playerObj.team_abbreviation)), React.createElement(\"div\", {\n      className: \"player-divider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, playerPerformance), constants.playerStats[this.props.league].alsoShow.length > 0 && React.createElement(\"div\", {\n      className: \"player-divider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, utils.createPlayerStats(playerObj, constants.playerStats[this.props.league].alsoShow))));\n  }\n  /**\n   * @name constructCategoryPlayer\n   * @param {String} category What is the category that we care about\n   * @param {Object} playerObj Player Object\n   */\n\n\n  constructCategoryPlayer(category, playerObj) {\n    const alsoShow = constants.playerStats[this.props.league].alsoShow;\n\n    if (alsoShow.length > 0) {\n      return React.createElement(\"div\", {\n        className: \"player-card\",\n        key: utils.generateKey(playerObj.display_name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"player-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, utils.createPlayerName(playerObj.display_name, playerObj.team_abbreviation)), React.createElement(\"div\", {\n        className: \"player-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, category.toUpperCase()), React.createElement(\"div\", {\n        className: \"player-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, utils.createPlayerStats(playerObj, alsoShow))));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"player-card\",\n        key: utils.generateKey(playerObj.display_name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"player-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, utils.createPlayerName(playerObj.display_name, playerObj.team_abbreviation)), React.createElement(\"div\", {\n        className: \"player-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, category.toUpperCase())));\n    }\n  }\n\n  render() {\n    let players = [];\n\n    if (Array.isArray(this.props.playerInfo)) {\n      this.props.playerInfo.forEach(player => {\n        players.push(this.constructStatPlayer(player));\n      });\n    } else {\n      for (let key in this.props.playerInfo) {\n        if (this.props.playerInfo.hasOwnProperty(key)) {\n          players.push(this.constructCategoryPlayer(key, this.props.playerInfo[key]));\n        }\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"player-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"players\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, players));\n  }\n\n}\n/**\n * Overall holder for our Game (upper portion), which\n * is composed of the name of the teams, game status,\n * and the current score(s)\n */\n\n\nclass GameContainer extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(TeamColumn, {\n      gameStatus: this.props.gameStatus,\n      teams: this.props.teams,\n      useSmall: this.props.useSmall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(ScoreTable, {\n      useSmall: this.props.useSmall,\n      gameScore: this.props.gameScore,\n      league: this.props.league,\n      extraStats: this.props.extraStats,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n/**\n * Score table which list the periods and other miscellaneous\n * stats that we might be interested in (R, H, E for MLB)\n */\n\n\nclass ScoreTable extends React.Component {\n  /**\n   * @name createHeaderRow\n   * @param {Number} periodLen How many periods\n   * @param {Array} extraStatHeaders What other stats do we care about\n   */\n  createHeaderRow(periodLen, extraStatHeaders) {\n    const tempArr = Array.apply(null, Array(periodLen)).map((x, i) => {\n      return i + 1;\n    });\n    return React.createElement(\"tr\", {\n      key: utils.generateKey(periodLen),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, tempArr.map(val => {\n      return React.createElement(\"td\", {\n        className: \"score-cell\",\n        key: utils.generateKey(val),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, this.generateHeaderLabel(val));\n    }), extraStatHeaders.map(header => {\n      return React.createElement(\"td\", {\n        className: \"score-cell\",\n        key: utils.generateKey(header),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, header);\n    }));\n  }\n  /**\n   * @name createScoreRow\n   * @param {Array} scores Array of scores for this team\n   * @param {Array} extraStats Extra stats for this team\n   */\n\n\n  createScoreRow(scores, extraStats) {\n    return React.createElement(\"tr\", {\n      key: utils.generateKey(scores.reduce((a, v) => a + v)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, scores.map((val, i) => {\n      return React.createElement(\"td\", {\n        className: \"score-cell\",\n        key: utils.generateKey(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, val);\n    }), extraStats.map((val, i) => {\n      if (val === '<TOTAL>') {\n        val = scores.reduce((acc, v) => acc + v);\n      }\n\n      return React.createElement(\"td\", {\n        className: \"score-cell\",\n        key: utils.generateKey(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, val);\n    }));\n  }\n  /**\n   * @name generateHeaderLabel\n   * @param {Number} idx Index of this period\n   */\n\n\n  generateHeaderLabel(idx) {\n    let returnStr = '';\n\n    if (idx > constants.periods[this.props.league].otCount) {\n      returnStr += utils.numReplace(constants.periods[this.props.league].OT, idx);\n    } else if (this.props.useSmall) {\n      returnStr += utils.numReplace(constants.periods[this.props.league].small, idx);\n    } else {\n      returnStr += utils.numReplace(constants.periods[this.props.league].normal, idx);\n    }\n\n    return returnStr;\n  }\n  /**\n   * @name createScoringTable\n   */\n\n\n  createScoringTable() {\n    let table = [];\n    const extraHeaders = this.props.extraStats.map(val => {\n      return Object.keys(val)[0];\n    });\n    table.push(this.createHeaderRow(this.props.gameScore.home.length, extraHeaders));\n    table.push(this.createScoreRow(this.props.gameScore.away, utils.generateTeamStatsArray(this.props.extraStats, 'away')));\n    table.push(this.createScoreRow(this.props.gameScore.home, utils.generateTeamStatsArray(this.props.extraStats, 'home')));\n    return table;\n  }\n\n  render() {\n    const tableData = this.createScoringTable();\n    return React.createElement(\"div\", {\n      className: \"game-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, tableData)));\n  }\n\n}\n/**\n * Component that holds the name of our teams as well\n * as the status of the overall game\n */\n\n\nclass TeamColumn extends React.Component {\n  render() {\n    let propToUse = '';\n\n    if (this.props.useSmall) {\n      propToUse += 'abbv';\n    } else {\n      propToUse += 'name';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"teams-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, utils.capitalizeString(this.props.gameStatus))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.props.teams.away[propToUse])), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, this.props.teams.home[propToUse])))));\n  }\n\n}\n/**\n * Main component that controls state, responsible for\n * the entire boxscore data flow\n */\n\n\nclass Boxscore extends React.Component {\n  /**\n   * @name constructor\n   * @param {Object} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStatus: '',\n      league: '',\n      scoreInfo: {\n        away: [],\n        home: []\n      },\n      playerInfo: {},\n      teams: {\n        away: '',\n        home: ''\n      },\n      useSmall: false,\n      extraStats: []\n    };\n  }\n  /**\n   * Remove our custom listener\n   */\n\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', () => {\n      this.checkWindowSize();\n    });\n  }\n  /**\n   * @name checkWindowSize\n   */\n\n\n  checkWindowSize() {\n    let width = window.innerWidth; // Arbitrary number of px\n\n    if (width < 1150 && !this.state.useSmall || width >= 1150 && this.state.useSmall) {\n      this.updateSizeState();\n    }\n  }\n  /**\n   * @name updateSizeState\n   */\n\n\n  updateSizeState() {\n    // We want all the data as is just tell all the child\n    // components to use smaller text options if they have em\n    const newState = this.state;\n    newState.useSmall = !this.state.useSmall;\n    this.setState(newState);\n  }\n  /**\n   * @name updateGameInfo\n   * @param {String} leagueType MLB vs. NBA\n   */\n\n\n  async updateGameInfo(leagueType) {\n    // Get all our Data\n    const gameInfo = await utils.getGameInformation(leagueType);\n    const gameScore = await utils.getGameScore(leagueType);\n    const teamInfo = await utils.getTeamInfo(leagueType);\n    const playerInfo = await utils.getPlayerInfo(leagueType);\n    const extraStats = await utils.getExtraStats(leagueType); // Create our new state obj\n\n    let stateObj = {\n      league: leagueType\n    };\n    stateObj.gameStatus = gameInfo.status;\n    stateObj.location = gameInfo.location;\n    stateObj.scoreInfo = gameScore;\n    stateObj.teams = teamInfo;\n    stateObj.playerInfo = playerInfo;\n    stateObj.extraStats = extraStats;\n    return stateObj;\n  }\n  /**\n   * Trigger initialdata update as well as our\n   * custom window resize listener\n   */\n\n\n  componentDidMount() {\n    this.updateGameInfo(constants.LEAGUETYPE).then(newState => {\n      this.setState(newState);\n    });\n    window.addEventListener('resize', () => {\n      this.checkWindowSize();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"boxscore-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(GameContainer, {\n      gameStatus: this.state.gameStatus,\n      gameScore: this.state.scoreInfo,\n      teams: this.state.teams,\n      useSmall: this.state.useSmall,\n      league: this.state.league,\n      extraStats: this.state.extraStats,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(PlayerContainer, {\n      playerInfo: this.state.playerInfo,\n      league: this.state.league,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Boxscore, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 391\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:\\workspace\\barstool\\boxscore-widget\\client\\src\\index.js"],"names":["React","ReactDOM","constants","utils","PlayerContainer","Component","constructStatPlayer","playerObj","stat","playerStats","props","league","searchBy","playerPerformance","capitalizeString","generateKey","display_name","createPlayerName","team_abbreviation","alsoShow","length","createPlayerStats","constructCategoryPlayer","category","toUpperCase","render","players","Array","isArray","playerInfo","forEach","player","push","key","hasOwnProperty","GameContainer","gameStatus","teams","useSmall","gameScore","extraStats","ScoreTable","createHeaderRow","periodLen","extraStatHeaders","tempArr","apply","map","x","i","val","generateHeaderLabel","header","createScoreRow","scores","reduce","a","v","acc","idx","returnStr","periods","otCount","numReplace","OT","small","normal","createScoringTable","table","extraHeaders","Object","keys","home","away","generateTeamStatsArray","tableData","TeamColumn","propToUse","Boxscore","constructor","state","scoreInfo","componentWillUnmount","window","removeEventListener","checkWindowSize","width","innerWidth","updateSizeState","newState","setState","updateGameInfo","leagueType","gameInfo","getGameInformation","getGameScore","teamInfo","getTeamInfo","getPlayerInfo","getExtraStats","stateObj","status","location","componentDidMount","LEAGUETYPE","then","addEventListener","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as constants from './constants/constants.js'\nimport * as utils from './utils/utils.js'\n\n/**\n * Player component that shows the names of high\n * performing/players of interest\n */\nclass PlayerContainer extends React.Component {\n    /**\n     * @name constructStatPlayer\n     * @param {Object} playerObj Player Object\n     */\n    constructStatPlayer(playerObj) {\n        const stat = constants.playerStats[this.props.league].searchBy\n        let playerPerformance = '';\n        playerPerformance += `${utils.capitalizeString(stat)}: ${playerObj[stat]}`;\n\n        return (\n            <div className=\"player-card\"\n                 key={utils.generateKey(playerObj.display_name)}>\n                <div className=\"stats\">\n                    <div className=\"player-divider\">\n                        {utils.createPlayerName(playerObj.display_name, playerObj.team_abbreviation)}\n                    </div>\n                    <div className=\"player-divider\">\n                        {playerPerformance}\n                    </div>\n                    {\n                        constants.playerStats[this.props.league].alsoShow.length > 0 &&\n                        <div className=\"player-divider\">\n                            {utils.createPlayerStats(playerObj, constants.playerStats[this.props.league].alsoShow)}\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * @name constructCategoryPlayer\n     * @param {String} category What is the category that we care about\n     * @param {Object} playerObj Player Object\n     */\n    constructCategoryPlayer(category, playerObj) {\n        const alsoShow = constants.playerStats[this.props.league].alsoShow;\n\n        if (alsoShow.length > 0) {\n            return (\n                <div className=\"player-card\"\n                     key={utils.generateKey(playerObj.display_name)}>\n                    <div className=\"stats\">\n                        <div className=\"player-divider\">\n                            {utils.createPlayerName(playerObj.display_name, playerObj.team_abbreviation)}\n                        </div>\n                        <div className=\"player-divider\">\n                            {category.toUpperCase()}\n                        </div>\n                        <div className=\"player-divider\">\n                            {utils.createPlayerStats(playerObj, alsoShow)}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"player-card\"\n                     key={utils.generateKey(playerObj.display_name)}>\n                    <div className=\"stats\">\n                        <div className=\"player-divider\">\n                            {utils.createPlayerName(playerObj.display_name, playerObj.team_abbreviation)}\n                        </div>\n                        <div className=\"player-divider\">\n                            {category.toUpperCase()}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        let players = [];\n\n        if (Array.isArray(this.props.playerInfo)) {\n            this.props.playerInfo.forEach((player) => {\n                players.push(this.constructStatPlayer(player));\n            });\n        } else {\n            for (let key in this.props.playerInfo) {\n                if (this.props.playerInfo.hasOwnProperty(key)) {\n                    players.push(this.constructCategoryPlayer(key, this.props.playerInfo[key]));\n                }\n            }\n        }\n\n        return (\n            <div className=\"player-container\">\n                <div className=\"players\">\n                    {players}\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Overall holder for our Game (upper portion), which\n * is composed of the name of the teams, game status,\n * and the current score(s)\n */\nclass GameContainer extends React.Component {\n    render() {\n        return (\n            <div className=\"game-container\">\n                <TeamColumn gameStatus={this.props.gameStatus}\n                    teams={this.props.teams}\n                    useSmall={this.props.useSmall} />\n                <ScoreTable useSmall={this.props.useSmall}\n                    gameScore={this.props.gameScore}\n                    league={this.props.league}\n                    extraStats={this.props.extraStats} />\n            </div>\n        );\n    }\n}\n\n/**\n * Score table which list the periods and other miscellaneous\n * stats that we might be interested in (R, H, E for MLB)\n */\nclass ScoreTable extends React.Component {\n    /**\n     * @name createHeaderRow\n     * @param {Number} periodLen How many periods\n     * @param {Array} extraStatHeaders What other stats do we care about\n     */\n    createHeaderRow(periodLen, extraStatHeaders) {\n        const tempArr = Array.apply(null, Array(periodLen))\n            .map((x, i) => { \n                return i + 1;\n            });\n\n        return (\n            <tr key={utils.generateKey(periodLen)}>\n                {\n                    tempArr.map((val) => {\n                        return <td className=\"score-cell\" key={utils.generateKey(val)}>{this.generateHeaderLabel(val)}</td>;\n                    })\n                }\n                {\n                    extraStatHeaders.map((header) => {\n                        return <td className=\"score-cell\" key={utils.generateKey(header)}>{header}</td>\n                    })\n                }\n            </tr>\n        );\n    }\n\n    /**\n     * @name createScoreRow\n     * @param {Array} scores Array of scores for this team\n     * @param {Array} extraStats Extra stats for this team\n     */\n    createScoreRow(scores, extraStats) {\n        return (\n            <tr key={utils.generateKey(scores.reduce((a, v) => a + v))}>\n                {\n                    scores.map((val, i) => {\n                        return <td className=\"score-cell\" key={utils.generateKey(i)}>{val}</td>\n                    })\n                }\n                {\n                    extraStats.map((val, i) => {\n                        if (val === '<TOTAL>') {\n                            val = scores.reduce((acc, v) => acc + v);\n                        }\n\n                        return <td className=\"score-cell\" key={utils.generateKey(i)}>{val}</td>\n                    })\n                }\n            </tr>\n        );\n    }\n\n    /**\n     * @name generateHeaderLabel\n     * @param {Number} idx Index of this period\n     */\n    generateHeaderLabel(idx) {\n        let returnStr = '';\n    \n        if (idx > constants.periods[this.props.league].otCount) {\n            returnStr += utils.numReplace(constants.periods[this.props.league].OT, idx);\n        } else if (this.props.useSmall) {\n            returnStr += utils.numReplace(constants.periods[this.props.league].small, idx);\n        } else {\n            returnStr += utils.numReplace(constants.periods[this.props.league].normal, idx);\n        }\n    \n        return returnStr;\n    }\n\n    /**\n     * @name createScoringTable\n     */\n    createScoringTable() {\n        let table = [];\n        const extraHeaders = this.props.extraStats.map((val) => {\n            return Object.keys(val)[0];\n        });\n\n        table.push(this.createHeaderRow(this.props.gameScore.home.length, extraHeaders));\n        table.push(this.createScoreRow(this.props.gameScore.away, utils.generateTeamStatsArray(this.props.extraStats, 'away')));\n        table.push(this.createScoreRow(this.props.gameScore.home, utils.generateTeamStatsArray(this.props.extraStats, 'home')));\n\n        return table;\n    }\n\n    render() {\n        const tableData = this.createScoringTable();\n\n        return (\n            <div className=\"game-score\">\n                <table>\n                    <tbody>\n                        {tableData}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n/**\n * Component that holds the name of our teams as well\n * as the status of the overall game\n */\nclass TeamColumn extends React.Component {\n    render() {\n        let propToUse = '';\n\n        if (this.props.useSmall) {\n            propToUse += 'abbv';\n        } else {\n            propToUse += 'name';\n        }\n\n        return (\n            <div className=\"teams-container\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {utils.capitalizeString(this.props.gameStatus)}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {this.props.teams.away[propToUse]}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {this.props.teams.home[propToUse]}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n/**\n * Main component that controls state, responsible for\n * the entire boxscore data flow\n */\nclass Boxscore extends React.Component {\n    /**\n     * @name constructor\n     * @param {Object} props \n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameStatus: '',\n            league: '',\n            scoreInfo: {away: [], home: []},\n            playerInfo: {},\n            teams: {away: '', home: ''},\n            useSmall: false,\n            extraStats: []\n        }\n    }\n\n    /**\n     * Remove our custom listener\n     */\n    componentWillUnmount() {\n        window.removeEventListener('resize', () => {\n            this.checkWindowSize()\n        });\n    }\n\n    /**\n     * @name checkWindowSize\n     */\n    checkWindowSize() {\n        let width = window.innerWidth;\n\n        // Arbitrary number of px\n        if ((width < 1150 && !this.state.useSmall) || (width >= 1150 && this.state.useSmall)) {\n            this.updateSizeState();\n        }\n    }\n\n    /**\n     * @name updateSizeState\n     */\n    updateSizeState() {\n        // We want all the data as is just tell all the child\n        // components to use smaller text options if they have em\n        const newState = this.state;\n        newState.useSmall = !this.state.useSmall;\n\n        this.setState(newState);\n    }\n\n    /**\n     * @name updateGameInfo\n     * @param {String} leagueType MLB vs. NBA\n     */\n    async updateGameInfo(leagueType) {\n        // Get all our Data\n        const gameInfo = await utils.getGameInformation(leagueType);\n        const gameScore = await utils.getGameScore(leagueType);\n        const teamInfo = await utils.getTeamInfo(leagueType);\n        const playerInfo = await utils.getPlayerInfo(leagueType);\n        const extraStats = await utils.getExtraStats(leagueType);\n\n        // Create our new state obj\n        let stateObj = {\n            league: leagueType\n        };\n\n        stateObj.gameStatus = gameInfo.status;\n        stateObj.location = gameInfo.location;\n        stateObj.scoreInfo = gameScore;\n        stateObj.teams = teamInfo;\n        stateObj.playerInfo = playerInfo;\n        stateObj.extraStats = extraStats;\n        \n        return stateObj;\n    }\n\n    /**\n     * Trigger initialdata update as well as our\n     * custom window resize listener\n     */\n    componentDidMount() {\n        this.updateGameInfo(constants.LEAGUETYPE)\n            .then((newState) => {\n                this.setState(newState);\n            });\n\n        window.addEventListener('resize', () => {\n            this.checkWindowSize();\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"boxscore-container\">\n                <GameContainer gameStatus={this.state.gameStatus}\n                               gameScore={this.state.scoreInfo}\n                               teams={this.state.teams}\n                               useSmall={this.state.useSmall}\n                               league={this.state.league}\n                               extraStats={this.state.extraStats}/>\n                <PlayerContainer playerInfo={this.state.playerInfo}\n                                 league={this.state.league} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Boxscore />,\n    document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}