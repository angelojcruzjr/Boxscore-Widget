{"ast":null,"code":"const constants = {\n  periods: {\n    MLB: {\n      normal: '<CARDNUM> Inning',\n      small: '<NUM>',\n      OT: '<NUM>',\n      extras: [{\n        'R': {\n          awayStat: 'away_batter_totals',\n          awaySubStat: 'runs',\n          homeStat: 'home_batter_totals',\n          homeSubStat: 'runs'\n        }\n      }, {\n        'H': {\n          awayStat: 'away_batter_totals',\n          awaySubStat: 'hits',\n          homeStat: 'home_batter_totals',\n          homeSubStat: 'hits'\n        }\n      }, {\n        'E': {\n          awayStat: 'away_errors',\n          awaySubStat: 'away_errors',\n          homeStat: 'home_errors',\n          homeSubStat: 'home_errors'\n        }\n      }]\n    },\n    NBA: {\n      normal: '<CARDNUM> Quarter',\n      small: 'Q<NUM>',\n      OT: 'OT<NUM>',\n      extras: [{\n        'T': {\n          awayStat: '<TOTAL>',\n          homeStat: '<TOTAL>',\n          awaySubStat: false,\n          homeSubStat: false\n        }\n      }]\n    }\n  },\n  playerStats: {\n    NBA: {\n      searchBy: 'points',\n      alsoShow: ['assists', 'defensive_rebounds', 'offensive_rebounds']\n    },\n    MLB: {\n      searchBy: ['win', 'loss', 'save'],\n      alsoShow: ['innings_pitched', 'earned_runs', 'strike_outs', 'era']\n    }\n  },\n  sharedValues: {\n    eventInfo: 'event_information',\n    homeScore: 'home_period_scores',\n    awayScore: 'away_period_scores',\n    homeTeamInfo: 'home_team',\n    awayTeamInfo: 'away_team'\n  },\n  playerIdentifiers: {\n    NBA: {\n      away: 'away_stats',\n      home: 'home_stats'\n    },\n    MLB: {\n      away: 'away_pitchers',\n      home: 'home_pitchers'\n    }\n  }\n};\n\nfunction constructLocObj(obj) {\n  return {\n    name: \"\".concat(obj.city, \", \").concat(obj.state),\n    stadium: obj.name\n  };\n}\n/**\r\n * @name fetchUrlData\r\n * @param {String} url API endpoint to hit\r\n * @returns {void}\r\n */\n\n\nfunction fetchUrlData(url) {\n  return new Promise((res, rej) => {\n    // Get our endpoint data\n    fetch(url).then(resp => {\n      // If it came back propertly, return it\n      if (resp.status === 200) {\n        res(resp.json()); // Otherwise send the error\n      } else {\n        rej(resp.statusText);\n      }\n    }).catch(err => {\n      rej(err);\n    });\n  });\n}\n/**\r\n * @name apiURLConstructor\r\n * @param {String} league NBA vs. MLB\r\n * @param {String} typeOfStat What aggregator stat would you like\r\n */\n\n\nfunction apiURLConstructor(league, typeOfStat) {\n  let baseURL = '/api/games';\n\n  if (league) {\n    baseURL += \"/\".concat(league.toUpperCase());\n  }\n\n  if (typeOfStat) {\n    baseURL += \"?stats=\".concat(typeOfStat);\n  }\n\n  return baseURL;\n}\n\nfunction capitalizeString(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction constructTeamObj(obj) {\n  return {\n    name: obj.full_name,\n    abbv: obj.abbreviation\n  };\n}\n\nfunction statComparison(a, b, stat) {\n  if (b[stat] > a[stat]) {\n    return 1;\n  } else if (a[stat] > b[stat]) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction getNHighestTotals(arr1, arr2, stat, n) {\n  const totalPlayers = arr1.concat(arr2);\n  return totalPlayers.sort((a, b) => statComparison(a, b, stat)).slice().filter((val, i) => {\n    return i < n;\n  });\n}\n\nasync function createPlayerDataObj(leagueType, playerDataObj) {\n  const statToFind = constants.playerStats[leagueType].searchBy;\n\n  if (!Array.isArray(statToFind)) {\n    const rankedPlayers = getNHighestTotals(playerDataObj.home, playerDataObj.away, statToFind, 3); // This returns an array\n\n    return rankedPlayers;\n  } else {\n    const players = findPlayerStats(statToFind, playerDataObj.home, playerDataObj.away); // This returns an object\n\n    return players;\n  }\n}\n\nfunction findPlayerStats(statsArr, arr1, arr2) {\n  const totalPlayers = arr1.concat(arr2);\n  let returnObj = {};\n\n  for (let entry of totalPlayers) {\n    if (entry[statsArr[0]]) {\n      returnObj[statsArr[0]] = entry;\n    } else if (entry[statsArr[1]]) {\n      returnObj[statsArr[1]] = entry;\n    } else if (entry[statsArr[2]]) {\n      returnObj[statsArr[2]] = entry;\n    } // Max amount we can give back\n\n\n    if (Object.keys(returnObj).length === 3) {\n      break;\n    }\n  }\n\n  return returnObj;\n}\n\nasync function getPlayerInfo(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].home);\n  const awayEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].away);\n  const homePlayerData = await fetchUrlData(homeEndpoint);\n  const awayPlayerData = await fetchUrlData(awayEndpoint);\n  const playerDataObj = {\n    home: homePlayerData,\n    away: awayPlayerData\n  };\n  const finalPlayerObj = createPlayerDataObj(leagueType, playerDataObj);\n  return finalPlayerObj;\n}\n\nasync function getTeamInfo(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, constants.sharedValues.homeTeamInfo);\n  const awayEndpoint = apiURLConstructor(leagueType, constants.sharedValues.awayTeamInfo);\n  const homeData = await fetchUrlData(homeEndpoint);\n  const awayData = await fetchUrlData(awayEndpoint);\n  const returnObj = {\n    home: constructTeamObj(homeData),\n    away: constructTeamObj(awayData)\n  };\n  return returnObj;\n}\n\nmodule.exports = {\n  capitalizeString: capitalizeString,\n  apiURLConstructor: apiURLConstructor,\n  fetchUrlData: fetchUrlData,\n  constructLocObj: constructLocObj,\n  constructTeamObj: constructTeamObj,\n  statComparison: statComparison,\n  getNHighestTotals: getNHighestTotals,\n  createPlayerDataObj: createPlayerDataObj,\n  findPlayerStats: findPlayerStats,\n  getPlayerInfo: getPlayerInfo,\n  getTeamInfo: getTeamInfo\n};","map":{"version":3,"sources":["C:\\workspace\\barstool\\boxscore-widget\\client\\src\\utils.js"],"names":["constants","periods","MLB","normal","small","OT","extras","awayStat","awaySubStat","homeStat","homeSubStat","NBA","playerStats","searchBy","alsoShow","sharedValues","eventInfo","homeScore","awayScore","homeTeamInfo","awayTeamInfo","playerIdentifiers","away","home","constructLocObj","obj","name","city","state","stadium","fetchUrlData","url","Promise","res","rej","fetch","then","resp","status","json","statusText","catch","err","apiURLConstructor","league","typeOfStat","baseURL","toUpperCase","capitalizeString","str","charAt","slice","constructTeamObj","full_name","abbv","abbreviation","statComparison","a","b","stat","getNHighestTotals","arr1","arr2","n","totalPlayers","concat","sort","filter","val","i","createPlayerDataObj","leagueType","playerDataObj","statToFind","Array","isArray","rankedPlayers","players","findPlayerStats","statsArr","returnObj","entry","Object","keys","length","getPlayerInfo","homeEndpoint","awayEndpoint","homePlayerData","awayPlayerData","finalPlayerObj","getTeamInfo","homeData","awayData","module","exports"],"mappings":"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","sourcesContent":["const constants = {\r\n    periods: {\r\n        MLB: {\r\n            normal: '<CARDNUM> Inning',\r\n            small: '<NUM>',\r\n            OT: '<NUM>',\r\n            extras: [\r\n                {\r\n                    'R': {\r\n                        awayStat: 'away_batter_totals',\r\n                        awaySubStat: 'runs',\r\n                        homeStat: 'home_batter_totals',\r\n                        homeSubStat: 'runs'\r\n                    }\r\n                },\r\n                {\r\n                    'H': {\r\n                        awayStat: 'away_batter_totals',\r\n                        awaySubStat: 'hits',\r\n                        homeStat: 'home_batter_totals',\r\n                        homeSubStat: 'hits'\r\n                    }\r\n                },\r\n                {\r\n                    'E': {\r\n                        awayStat: 'away_errors',\r\n                        awaySubStat: 'away_errors',\r\n                        homeStat: 'home_errors',\r\n                        homeSubStat: 'home_errors'\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        NBA: {\r\n            normal: '<CARDNUM> Quarter',\r\n            small: 'Q<NUM>',\r\n            OT: 'OT<NUM>',\r\n            extras: [\r\n                {\r\n                    'T': {\r\n                        awayStat: '<TOTAL>',\r\n                        homeStat: '<TOTAL>',\r\n                        awaySubStat: false,\r\n                        homeSubStat: false\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    playerStats: {\r\n        NBA: {\r\n            searchBy: 'points',\r\n            alsoShow: ['assists', 'defensive_rebounds', 'offensive_rebounds']\r\n        },\r\n        MLB: {\r\n            searchBy: ['win', 'loss', 'save'],\r\n            alsoShow: ['innings_pitched', 'earned_runs', 'strike_outs', 'era']\r\n        }\r\n    },\r\n    sharedValues: {\r\n        eventInfo: 'event_information',\r\n        homeScore: 'home_period_scores',\r\n        awayScore: 'away_period_scores',\r\n        homeTeamInfo: 'home_team',\r\n        awayTeamInfo: 'away_team'\r\n    },\r\n    playerIdentifiers: {\r\n        NBA: {\r\n            away: 'away_stats',\r\n            home: 'home_stats',\r\n        },\r\n        MLB: {\r\n            away: 'away_pitchers',\r\n            home: 'home_pitchers'\r\n        }\r\n    }\r\n}\r\n\r\nfunction constructLocObj(obj) {\r\n    return {\r\n        name: `${obj.city}, ${obj.state}`,\r\n        stadium: obj.name\r\n    };\r\n}\r\n\r\n/**\r\n * @name fetchUrlData\r\n * @param {String} url API endpoint to hit\r\n * @returns {void}\r\n */\r\nfunction fetchUrlData(url) {\r\n    return new Promise((res, rej) => {\r\n        // Get our endpoint data\r\n        fetch(url)\r\n            .then((resp) => {\r\n                // If it came back propertly, return it\r\n                if (resp.status === 200) {\r\n                    res(resp.json());\r\n                // Otherwise send the error\r\n                } else {\r\n                    rej(resp.statusText);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                rej(err);\r\n            });\r\n    });\r\n}\r\n\r\n/**\r\n * @name apiURLConstructor\r\n * @param {String} league NBA vs. MLB\r\n * @param {String} typeOfStat What aggregator stat would you like\r\n */\r\nfunction apiURLConstructor(league, typeOfStat) {\r\n    let baseURL = '/api/games';\r\n\r\n    if (league) {\r\n        baseURL += `/${league.toUpperCase()}`;\r\n    }\r\n\r\n    if (typeOfStat) {\r\n        baseURL += `?stats=${typeOfStat}`;\r\n    }\r\n\r\n    return baseURL;\r\n}\r\n\r\nfunction capitalizeString(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nfunction constructTeamObj(obj) {\r\n    return {\r\n        name: obj.full_name,\r\n        abbv: obj.abbreviation\r\n    };\r\n}\r\n\r\nfunction statComparison(a, b, stat) {\r\n    if (b[stat] > a[stat]) {\r\n        return 1;\r\n    } else if (a[stat] > b[stat]) {\r\n        return -1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction getNHighestTotals(arr1, arr2, stat, n) {\r\n    const totalPlayers = arr1.concat(arr2);\r\n\r\n    return totalPlayers\r\n        .sort((a, b) => statComparison(a, b, stat))\r\n        .slice()\r\n        .filter((val, i) => {\r\n            return i < n;\r\n        });\r\n}\r\n\r\nasync function createPlayerDataObj(leagueType, playerDataObj) {\r\n    const statToFind = constants.playerStats[leagueType].searchBy;\r\n\r\n    if (!Array.isArray(statToFind)) {\r\n        const rankedPlayers = getNHighestTotals(playerDataObj.home, playerDataObj.away, statToFind, 3);\r\n        \r\n        // This returns an array\r\n        return rankedPlayers\r\n    } else {\r\n        const players = findPlayerStats(statToFind, playerDataObj.home, playerDataObj.away);\r\n\r\n        // This returns an object\r\n        return players;\r\n    }\r\n}\r\n\r\nfunction findPlayerStats(statsArr, arr1, arr2) {\r\n    const totalPlayers = arr1.concat(arr2);\r\n    let returnObj = {};\r\n\r\n    for (let entry of totalPlayers) {\r\n        if (entry[statsArr[0]]) {\r\n            returnObj[statsArr[0]] = entry;\r\n        } else if (entry[statsArr[1]]) {\r\n            returnObj[statsArr[1]] = entry;\r\n        } else if (entry[statsArr[2]]) {\r\n            returnObj[statsArr[2]] = entry;\r\n        }\r\n\r\n        // Max amount we can give back\r\n        if (Object.keys(returnObj).length === 3) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return returnObj;\r\n}\r\n\r\nasync function getPlayerInfo(leagueType) {\r\n    const homeEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].home);\r\n    const awayEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].away);\r\n    const homePlayerData = await fetchUrlData(homeEndpoint);\r\n    const awayPlayerData = await fetchUrlData(awayEndpoint);\r\n    const playerDataObj = {\r\n        home: homePlayerData,\r\n        away: awayPlayerData\r\n    };\r\n    const finalPlayerObj = createPlayerDataObj(leagueType, playerDataObj);\r\n\r\n    return finalPlayerObj;\r\n}\r\n\r\nasync function getTeamInfo(leagueType) {\r\n    const homeEndpoint = apiURLConstructor(leagueType, constants.sharedValues.homeTeamInfo);\r\n    const awayEndpoint = apiURLConstructor(leagueType, constants.sharedValues.awayTeamInfo);\r\n    const homeData = await fetchUrlData(homeEndpoint);\r\n    const awayData = await fetchUrlData(awayEndpoint);\r\n    const returnObj = {\r\n        home: constructTeamObj(homeData),\r\n        away: constructTeamObj(awayData)\r\n    }\r\n\r\n    return returnObj;\r\n}\r\n\r\nmodule.exports = {\r\n    capitalizeString: capitalizeString,\r\n    apiURLConstructor: apiURLConstructor,\r\n    fetchUrlData: fetchUrlData,\r\n    constructLocObj: constructLocObj,\r\n    constructTeamObj: constructTeamObj,\r\n    statComparison: statComparison,\r\n    getNHighestTotals: getNHighestTotals,\r\n    createPlayerDataObj: createPlayerDataObj,\r\n    findPlayerStats: findPlayerStats,\r\n    getPlayerInfo: getPlayerInfo,\r\n    getTeamInfo: getTeamInfo\r\n}"]},"metadata":{},"sourceType":"module"}