{"ast":null,"code":"// This is a modified version of what is in constants.js\nconst constants = {\n  periods: {\n    MLB: {\n      extras: [{\n        'R': {\n          awayStat: 'away_batter_totals',\n          awaySubStat: 'runs',\n          homeStat: 'home_batter_totals',\n          homeSubStat: 'runs'\n        }\n      }, {\n        'H': {\n          awayStat: 'away_batter_totals',\n          awaySubStat: 'hits',\n          homeStat: 'home_batter_totals',\n          homeSubStat: 'hits'\n        }\n      }, {\n        'E': {\n          awayStat: 'away_errors',\n          awaySubStat: 'away_errors',\n          homeStat: 'home_errors',\n          homeSubStat: 'home_errors'\n        }\n      }]\n    },\n    NBA: {\n      extras: [{\n        'T': {\n          awayStat: '<TOTAL>',\n          homeStat: '<TOTAL>',\n          awaySubStat: false,\n          homeSubStat: false\n        }\n      }]\n    }\n  },\n  playerStats: {\n    NBA: {\n      searchBy: 'points'\n    },\n    MLB: {\n      searchBy: ['win', 'loss', 'save']\n    }\n  },\n  sharedValues: {\n    eventInfo: 'event_information',\n    homeScore: 'home_period_scores',\n    awayScore: 'away_period_scores',\n    homeTeamInfo: 'home_team',\n    awayTeamInfo: 'away_team'\n  },\n  playerIdentifiers: {\n    NBA: {\n      away: 'away_stats',\n      home: 'home_stats'\n    },\n    MLB: {\n      away: 'away_pitchers',\n      home: 'home_pitchers'\n    }\n  }\n  /* ======================================== */\n\n  /*       OBJECT MANIPULATION FUNCTIONS      */\n\n  /* ======================================== */\n\n  /**\r\n   * @name generateKey\r\n   * @param {String} pre some Unique identifier \r\n   */\n\n};\n\nconst generateKey = str => {\n  return \"\".concat(str, \"_\").concat(new Date().getTime());\n};\n/**\r\n * @name numReplace\r\n * @param {String} str String to perform replace on \r\n * @param {Number} idx Number to be inserted\r\n */\n\n\nfunction numReplace(str, idx) {\n  if (str.includes('<NUM>')) {\n    return str.replace('<NUM>', idx);\n  } else {\n    return str.replace('<CARDNUM>', getNumberWithOrdinal(idx));\n  }\n}\n/**\r\n * @name getNumberWithOrdinal\r\n * @param {Number} n Number to convert: 1 ==> 1st \r\n */\n\n\nfunction getNumberWithOrdinal(n) {\n  let s = [\"th\", \"st\", \"nd\", \"rd\"],\n      v = n % 100;\n  return n + (s[(v - 20) % 10] || s[v] || s[0]);\n}\n/**\r\n * @name createPlayerStats\r\n * @param {Object} playerObj Player Object\r\n * @param {Array} stats Array of stats that interest us \r\n */\n\n\nfunction createPlayerStats(playerObj, stats) {\n  let returnMsg = '';\n  stats.forEach(stat => {\n    if (playerObj[stat]) {\n      returnMsg += \"\".concat(stat.toUpperCase().replace(/_/g, ' '), \": \").concat(playerObj[stat], \", \");\n    }\n  });\n\n  if (returnMsg.length > 0) {\n    returnMsg = returnMsg.slice(0, -2);\n  }\n\n  return returnMsg;\n}\n/**\r\n * @name createPlayerName\r\n */\n\n\nfunction createPlayerName(name, team) {\n  return \"\".concat(name, \" (\").concat(team, \")\");\n}\n/**\r\n * @name constructLocObj\r\n * @param {Object} obj Location object \r\n */\n\n\nfunction constructLocObj(obj) {\n  return {\n    name: \"\".concat(obj.city, \", \").concat(obj.state),\n    stadium: obj.name\n  };\n}\n/**\r\n * @name apiURLConstructor\r\n * @param {String} league NBA vs. MLB\r\n * @param {String} typeOfStat What aggregator stat would you like\r\n */\n\n\nfunction apiURLConstructor(league, typeOfStat) {\n  let baseURL = '/api/games';\n\n  if (league) {\n    baseURL += \"/\".concat(league.toUpperCase());\n  }\n\n  if (typeOfStat) {\n    baseURL += \"?stats=\".concat(typeOfStat);\n  }\n\n  return baseURL;\n}\n/**\r\n * @name capitalizeString\r\n * @param {String} str String to capitalize \r\n */\n\n\nfunction capitalizeString(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\r\n * @name constructTeamObj\r\n * @param {Object} obj Object of team properties \r\n */\n\n\nfunction constructTeamObj(obj) {\n  return {\n    name: obj.full_name,\n    abbv: obj.abbreviation\n  };\n}\n/**\r\n * @name statComparison\r\n * @param {Object} a Player A\r\n * @param {Object} b Player B \r\n * @param {String} stat Stat of interest \r\n */\n\n\nfunction statComparison(a, b, stat) {\n  if (b[stat] > a[stat]) {\n    return 1;\n  } else if (a[stat] > b[stat]) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n/**\r\n * @name getNHighestTotals\r\n * @param {Array} arr1 Array of team players \r\n * @param {Array} arr2 Array of team players\r\n * @param {String} stat Stat of interest\r\n * @param {Number} n How many players to limit the result by\r\n */\n\n\nfunction getNHighestTotals(arr1, arr2, stat, n) {\n  const totalPlayers = arr1.concat(arr2);\n  return totalPlayers.sort((a, b) => statComparison(a, b, stat)).slice().filter((val, i) => {\n    return i < n;\n  });\n}\n/**\r\n * @name createPlayerDataObj\r\n * @param {String} leagueType MLB vs. NBA\r\n * @param {Object} playerDataObj Player Object\r\n */\n\n\nasync function createPlayerDataObj(leagueType, playerDataObj) {\n  const statToFind = constants.playerStats[leagueType].searchBy;\n\n  if (!Array.isArray(statToFind)) {\n    const rankedPlayers = getNHighestTotals(playerDataObj.home, playerDataObj.away, statToFind, 3); // This returns an array (STAT Player aka dont care about wins or saves, etc.)\n\n    return rankedPlayers;\n  } else {\n    const players = findPlayerStats(statToFind, playerDataObj.home, playerDataObj.away); // This returns an object (CATEGORY Player aka we do care about wins or saves, etc.)\n\n    return players;\n  }\n}\n/**\r\n * @name findPlayerStats\r\n * @param {Array} statsArr Array of statistics that interest us \r\n * @param {Array} arr1 Array of Players from team A\r\n * @param {Array} arr2 Array of Players from team B \r\n */\n\n\nfunction findPlayerStats(statsArr, arr1, arr2) {\n  const totalPlayers = arr1.concat(arr2);\n  let returnObj = {}; // We Assume that you look for 3 stats...\n  // TODO::: don't make this assumption\n\n  for (let entry of totalPlayers) {\n    if (entry[statsArr[0]]) {\n      returnObj[statsArr[0]] = entry;\n    } else if (entry[statsArr[1]]) {\n      returnObj[statsArr[1]] = entry;\n    } else if (entry[statsArr[2]]) {\n      returnObj[statsArr[2]] = entry;\n    } // Max amount we can give back\n\n\n    if (Object.keys(returnObj).length === 3) {\n      break;\n    }\n  }\n\n  return returnObj;\n}\n/**\r\n * @name generateTeamStatsArray\r\n * @param {Array} arr Array of Stat Objects\r\n * @param {String} teamType MLB vs. NBA\r\n */\n\n\nfunction generateTeamStatsArray(arr, teamType) {\n  let returnArr = [];\n\n  for (const obj of arr) {\n    let key = Object.keys(obj)[0];\n    returnArr.push(obj[key][teamType]);\n  }\n\n  return returnArr;\n}\n/* ======================================== */\n\n/*   ASYNC STUFF THAT TOUCHES OUR BACKEND   */\n\n/* ======================================== */\n\n/**\r\n * @name fetchUrlData\r\n * @param {String} url API endpoint to hit\r\n */\n\n\nfunction fetchUrlData(url) {\n  return new Promise((res, rej) => {\n    // Get our endpoint data\n    fetch(url).then(resp => {\n      // If it came back propertly, return it\n      if (resp.status === 200) {\n        res(resp.json()); // Otherwise send the error\n      } else {\n        rej(resp.statusText);\n      }\n    }).catch(err => {\n      rej(err);\n    });\n  });\n}\n/**\r\n * @name getPlayerInfo\r\n * @param {String} leagueType MLB vs. NBA\r\n */\n\n\nasync function getPlayerInfo(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].home);\n  const awayEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].away);\n  const homePlayerData = await fetchUrlData(homeEndpoint);\n  const awayPlayerData = await fetchUrlData(awayEndpoint);\n  const playerDataObj = {\n    home: homePlayerData,\n    away: awayPlayerData\n  };\n  const finalPlayerObj = createPlayerDataObj(leagueType, playerDataObj);\n  return finalPlayerObj;\n}\n/**\r\n * @name getTeamInfo\r\n * @param {String} leagueType MLB vs. NBA\r\n */\n\n\nasync function getTeamInfo(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, constants.sharedValues.homeTeamInfo);\n  const awayEndpoint = apiURLConstructor(leagueType, constants.sharedValues.awayTeamInfo);\n  const homeData = await fetchUrlData(homeEndpoint);\n  const awayData = await fetchUrlData(awayEndpoint);\n  const returnObj = {\n    home: constructTeamObj(homeData),\n    away: constructTeamObj(awayData)\n  };\n  return returnObj;\n}\n/**\r\n * @name getGameInformation\r\n * @param {String} leagueType MLB vs. NBA\r\n */\n\n\nasync function getGameInformation(leagueType) {\n  const apiEndpoint = apiURLConstructor(leagueType, constants.sharedValues.eventInfo);\n  const eventData = await fetchUrlData(apiEndpoint);\n  const returnObj = {\n    status: eventData.status,\n    location: constructLocObj(eventData.site)\n  };\n  return returnObj;\n}\n/**\r\n * @name getGameScore\r\n * @param {String} leagueType MLB vs. NBA\r\n */\n\n\nasync function getGameScore(leagueType) {\n  const homeEndpoint = apiURLConstructor(leagueType, constants.sharedValues.homeScore);\n  const awayEndpoint = apiURLConstructor(leagueType, constants.sharedValues.awayScore);\n  const homeData = await fetchUrlData(homeEndpoint);\n  const awayData = await fetchUrlData(awayEndpoint);\n  const returnObj = {\n    home: homeData,\n    away: awayData\n  };\n  return returnObj;\n}\n/**\r\n * @name getTeamStats\r\n * @param {String} leagueType MLB vs. NBA\r\n * @param {Object} stateObj Stats that interest us\r\n */\n\n\nasync function getTeamStats(leagueType, stateObj) {\n  let tempObj = {\n    away: {},\n    home: {}\n  };\n  let apiEndpoint = '';\n  let returnData; // Get Away Stats\n\n  if (stateObj.awayStat === '<TOTAL>') {\n    tempObj.away = '<TOTAL>';\n  } else {\n    apiEndpoint = apiURLConstructor(leagueType, stateObj.awayStat);\n    returnData = await fetchUrlData(apiEndpoint);\n\n    if (stateObj.awaySubStat) {\n      tempObj.away = returnData[stateObj.awaySubStat];\n    } else {\n      tempObj.away = returnData;\n    }\n  } // TODO::: combine home and away logic\n  // Get Home Stats\n\n\n  if (stateObj.homeStat === '<TOTAL>') {\n    tempObj.home = '<TOTAL>';\n  } else {\n    apiEndpoint = apiURLConstructor(leagueType, stateObj.homeStat);\n    returnData = await fetchUrlData(apiEndpoint);\n\n    if (stateObj.homeSubStat) {\n      tempObj.home = returnData[stateObj.homeSubStat];\n    } else {\n      tempObj.home = returnData;\n    }\n  }\n\n  return tempObj;\n}\n/**\r\n * @name getExtraStats\r\n * @param {String} leagueType MLB vs. NBA \r\n */\n\n\nasync function getExtraStats(leagueType) {\n  let returnStats = [];\n  const extraStats = constants.periods[leagueType].extras;\n\n  for (const obj of extraStats) {\n    const statKey = Object.keys(obj)[0];\n    let tempObj = {};\n    let tempData = await getTeamStats(leagueType, obj[statKey]);\n    tempObj[statKey] = tempData;\n    returnStats.push(tempObj);\n  }\n\n  return returnStats;\n}\n\nmodule.exports = {\n  capitalizeString: capitalizeString,\n  apiURLConstructor: apiURLConstructor,\n  fetchUrlData: fetchUrlData,\n  constructLocObj: constructLocObj,\n  constructTeamObj: constructTeamObj,\n  statComparison: statComparison,\n  getNHighestTotals: getNHighestTotals,\n  createPlayerDataObj: createPlayerDataObj,\n  findPlayerStats: findPlayerStats,\n  getPlayerInfo: getPlayerInfo,\n  getTeamInfo: getTeamInfo,\n  getGameInformation: getGameInformation,\n  getGameScore: getGameScore,\n  getExtraStats: getExtraStats,\n  generateTeamStatsArray: generateTeamStatsArray,\n  createPlayerName: createPlayerName,\n  createPlayerStats: createPlayerStats,\n  numReplace: numReplace,\n  generateKey: generateKey\n};","map":{"version":3,"sources":["C:\\workspace\\barstool\\boxscore-widget\\client\\src\\utils\\utils.js"],"names":["constants","periods","MLB","extras","awayStat","awaySubStat","homeStat","homeSubStat","NBA","playerStats","searchBy","sharedValues","eventInfo","homeScore","awayScore","homeTeamInfo","awayTeamInfo","playerIdentifiers","away","home","generateKey","str","Date","getTime","numReplace","idx","includes","replace","getNumberWithOrdinal","n","s","v","createPlayerStats","playerObj","stats","returnMsg","forEach","stat","toUpperCase","length","slice","createPlayerName","name","team","constructLocObj","obj","city","state","stadium","apiURLConstructor","league","typeOfStat","baseURL","capitalizeString","charAt","constructTeamObj","full_name","abbv","abbreviation","statComparison","a","b","getNHighestTotals","arr1","arr2","totalPlayers","concat","sort","filter","val","i","createPlayerDataObj","leagueType","playerDataObj","statToFind","Array","isArray","rankedPlayers","players","findPlayerStats","statsArr","returnObj","entry","Object","keys","generateTeamStatsArray","arr","teamType","returnArr","key","push","fetchUrlData","url","Promise","res","rej","fetch","then","resp","status","json","statusText","catch","err","getPlayerInfo","homeEndpoint","awayEndpoint","homePlayerData","awayPlayerData","finalPlayerObj","getTeamInfo","homeData","awayData","getGameInformation","apiEndpoint","eventData","location","site","getGameScore","getTeamStats","stateObj","tempObj","returnData","getExtraStats","returnStats","extraStats","statKey","tempData","module","exports"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE;AACLC,IAAAA,GAAG,EAAE;AACDC,MAAAA,MAAM,EAAE,CACJ;AACI,aAAK;AACDC,UAAAA,QAAQ,EAAE,oBADT;AAEDC,UAAAA,WAAW,EAAE,MAFZ;AAGDC,UAAAA,QAAQ,EAAE,oBAHT;AAIDC,UAAAA,WAAW,EAAE;AAJZ;AADT,OADI,EASJ;AACI,aAAK;AACDH,UAAAA,QAAQ,EAAE,oBADT;AAEDC,UAAAA,WAAW,EAAE,MAFZ;AAGDC,UAAAA,QAAQ,EAAE,oBAHT;AAIDC,UAAAA,WAAW,EAAE;AAJZ;AADT,OATI,EAiBJ;AACI,aAAK;AACDH,UAAAA,QAAQ,EAAE,aADT;AAEDC,UAAAA,WAAW,EAAE,aAFZ;AAGDC,UAAAA,QAAQ,EAAE,aAHT;AAIDC,UAAAA,WAAW,EAAE;AAJZ;AADT,OAjBI;AADP,KADA;AA6BLC,IAAAA,GAAG,EAAE;AACDL,MAAAA,MAAM,EAAE,CACJ;AACI,aAAK;AACDC,UAAAA,QAAQ,EAAE,SADT;AAEDE,UAAAA,QAAQ,EAAE,SAFT;AAGDD,UAAAA,WAAW,EAAE,KAHZ;AAIDE,UAAAA,WAAW,EAAE;AAJZ;AADT,OADI;AADP;AA7BA,GADK;AA2CdE,EAAAA,WAAW,EAAE;AACTD,IAAAA,GAAG,EAAE;AACDE,MAAAA,QAAQ,EAAE;AADT,KADI;AAITR,IAAAA,GAAG,EAAE;AACDQ,MAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB;AADT;AAJI,GA3CC;AAmDdC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAE,mBADD;AAEVC,IAAAA,SAAS,EAAE,oBAFD;AAGVC,IAAAA,SAAS,EAAE,oBAHD;AAIVC,IAAAA,YAAY,EAAE,WAJJ;AAKVC,IAAAA,YAAY,EAAE;AALJ,GAnDA;AA0DdC,EAAAA,iBAAiB,EAAE;AACfT,IAAAA,GAAG,EAAE;AACDU,MAAAA,IAAI,EAAE,YADL;AAEDC,MAAAA,IAAI,EAAE;AAFL,KADU;AAKfjB,IAAAA,GAAG,EAAE;AACDgB,MAAAA,IAAI,EAAE,eADL;AAEDC,MAAAA,IAAI,EAAE;AAFL;AALU;AAYvB;;AACA;;AACA;;AAEA;;;;;AA1EkB,CAAlB;;AA8EA,MAAMC,WAAW,GAAIC,GAAD,IAAS;AACzB,mBAAUA,GAAV,cAAkB,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACH,CAFD;AAIA;;;;;;;AAKA,SAASC,UAAT,CAAoBH,GAApB,EAAyBI,GAAzB,EAA8B;AAC1B,MAAIJ,GAAG,CAACK,QAAJ,CAAa,OAAb,CAAJ,EAA2B;AACvB,WAAOL,GAAG,CAACM,OAAJ,CAAY,OAAZ,EAAqBF,GAArB,CAAP;AACH,GAFD,MAEO;AACH,WAAOJ,GAAG,CAACM,OAAJ,CAAY,WAAZ,EAAyBC,oBAAoB,CAACH,GAAD,CAA7C,CAAP;AACH;AACJ;AAED;;;;;;AAIA,SAASG,oBAAT,CAA8BC,CAA9B,EAAiC;AAC7B,MAAIC,CAAC,GAAC,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,CAAN;AAAA,MACAC,CAAC,GAAEF,CAAC,GAAG,GADP;AAEA,SAAOA,CAAC,IAAIC,CAAC,CAAC,CAACC,CAAC,GAAC,EAAH,IAAO,EAAR,CAAD,IAAcD,CAAC,CAACC,CAAD,CAAf,IAAoBD,CAAC,CAAC,CAAD,CAAzB,CAAR;AACF;AAEF;;;;;;;AAKA,SAASE,iBAAT,CAA2BC,SAA3B,EAAsCC,KAAtC,EAA6C;AACzC,MAAIC,SAAS,GAAG,EAAhB;AAEAD,EAAAA,KAAK,CAACE,OAAN,CAAeC,IAAD,IAAU;AACpB,QAAIJ,SAAS,CAACI,IAAD,CAAb,EAAqB;AACjBF,MAAAA,SAAS,cAAOE,IAAI,CAACC,WAAL,GAAmBX,OAAnB,CAA2B,IAA3B,EAAiC,GAAjC,CAAP,eAAiDM,SAAS,CAACI,IAAD,CAA1D,OAAT;AACH;AACJ,GAJD;;AAMA,MAAIF,SAAS,CAACI,MAAV,GAAmB,CAAvB,EAA0B;AACtBJ,IAAAA,SAAS,GAAGA,SAAS,CAACK,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACH;;AAED,SAAOL,SAAP;AACH;AAED;;;;;AAGA,SAASM,gBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AACnC,mBAAUD,IAAV,eAAmBC,IAAnB;AACH;AAED;;;;;;AAIA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B,SAAO;AACHH,IAAAA,IAAI,YAAKG,GAAG,CAACC,IAAT,eAAkBD,GAAG,CAACE,KAAtB,CADD;AAEHC,IAAAA,OAAO,EAAEH,GAAG,CAACH;AAFV,GAAP;AAIH;AAED;;;;;;;AAKA,SAASO,iBAAT,CAA2BC,MAA3B,EAAmCC,UAAnC,EAA+C;AAC3C,MAAIC,OAAO,GAAG,YAAd;;AAEA,MAAIF,MAAJ,EAAY;AACRE,IAAAA,OAAO,eAAQF,MAAM,CAACZ,WAAP,EAAR,CAAP;AACH;;AAED,MAAIa,UAAJ,EAAgB;AACZC,IAAAA,OAAO,qBAAcD,UAAd,CAAP;AACH;;AAED,SAAOC,OAAP;AACH;AAED;;;;;;AAIA,SAASC,gBAAT,CAA0BhC,GAA1B,EAA+B;AAC3B,SAAOA,GAAG,CAACiC,MAAJ,CAAW,CAAX,EAAchB,WAAd,KAA8BjB,GAAG,CAACmB,KAAJ,CAAU,CAAV,CAArC;AACH;AAED;;;;;;AAIA,SAASe,gBAAT,CAA0BV,GAA1B,EAA+B;AAC3B,SAAO;AACHH,IAAAA,IAAI,EAAEG,GAAG,CAACW,SADP;AAEHC,IAAAA,IAAI,EAAEZ,GAAG,CAACa;AAFP,GAAP;AAIH;AAED;;;;;;;;AAMA,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BxB,IAA9B,EAAoC;AAChC,MAAIwB,CAAC,CAACxB,IAAD,CAAD,GAAUuB,CAAC,CAACvB,IAAD,CAAf,EAAuB;AACnB,WAAO,CAAP;AACH,GAFD,MAEO,IAAIuB,CAAC,CAACvB,IAAD,CAAD,GAAUwB,CAAC,CAACxB,IAAD,CAAf,EAAuB;AAC1B,WAAO,CAAC,CAAR;AACH,GAFM,MAEA;AACH,WAAO,CAAP;AACH;AACJ;AAED;;;;;;;;;AAOA,SAASyB,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC3B,IAAvC,EAA6CR,CAA7C,EAAgD;AAC5C,QAAMoC,YAAY,GAAGF,IAAI,CAACG,MAAL,CAAYF,IAAZ,CAArB;AAEA,SAAOC,YAAY,CACdE,IADE,CACG,CAACP,CAAD,EAAIC,CAAJ,KAAUF,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAOxB,IAAP,CAD3B,EAEFG,KAFE,GAGF4B,MAHE,CAGK,CAACC,GAAD,EAAMC,CAAN,KAAY;AAChB,WAAOA,CAAC,GAAGzC,CAAX;AACH,GALE,CAAP;AAMH;AAED;;;;;;;AAKA,eAAe0C,mBAAf,CAAmCC,UAAnC,EAA+CC,aAA/C,EAA8D;AAC1D,QAAMC,UAAU,GAAG1E,SAAS,CAACS,WAAV,CAAsB+D,UAAtB,EAAkC9D,QAArD;;AAEA,MAAI,CAACiE,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC5B,UAAMG,aAAa,GAAGf,iBAAiB,CAACW,aAAa,CAACtD,IAAf,EAAqBsD,aAAa,CAACvD,IAAnC,EAAyCwD,UAAzC,EAAqD,CAArD,CAAvC,CAD4B,CAG5B;;AACA,WAAOG,aAAP;AACH,GALD,MAKO;AACH,UAAMC,OAAO,GAAGC,eAAe,CAACL,UAAD,EAAaD,aAAa,CAACtD,IAA3B,EAAiCsD,aAAa,CAACvD,IAA/C,CAA/B,CADG,CAGH;;AACA,WAAO4D,OAAP;AACH;AACJ;AAED;;;;;;;;AAMA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCjB,IAAnC,EAAyCC,IAAzC,EAA+C;AAC3C,QAAMC,YAAY,GAAGF,IAAI,CAACG,MAAL,CAAYF,IAAZ,CAArB;AACA,MAAIiB,SAAS,GAAG,EAAhB,CAF2C,CAI3C;AACA;;AACA,OAAK,IAAIC,KAAT,IAAkBjB,YAAlB,EAAgC;AAC5B,QAAIiB,KAAK,CAACF,QAAQ,CAAC,CAAD,CAAT,CAAT,EAAwB;AACpBC,MAAAA,SAAS,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAT,GAAyBE,KAAzB;AACH,KAFD,MAEO,IAAIA,KAAK,CAACF,QAAQ,CAAC,CAAD,CAAT,CAAT,EAAwB;AAC3BC,MAAAA,SAAS,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAT,GAAyBE,KAAzB;AACH,KAFM,MAEA,IAAIA,KAAK,CAACF,QAAQ,CAAC,CAAD,CAAT,CAAT,EAAwB;AAC3BC,MAAAA,SAAS,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAT,GAAyBE,KAAzB;AACH,KAP2B,CAS5B;;;AACA,QAAIC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuB1C,MAAvB,KAAkC,CAAtC,EAAyC;AACrC;AACH;AACJ;;AAED,SAAO0C,SAAP;AACH;AAED;;;;;;;AAKA,SAASI,sBAAT,CAAgCC,GAAhC,EAAqCC,QAArC,EAA+C;AAC3C,MAAIC,SAAS,GAAG,EAAhB;;AAEA,OAAK,MAAM3C,GAAX,IAAkByC,GAAlB,EAAuB;AACnB,QAAIG,GAAG,GAAGN,MAAM,CAACC,IAAP,CAAYvC,GAAZ,EAAiB,CAAjB,CAAV;AAEA2C,IAAAA,SAAS,CAACE,IAAV,CAAe7C,GAAG,CAAC4C,GAAD,CAAH,CAASF,QAAT,CAAf;AACH;;AAED,SAAOC,SAAP;AACH;AAED;;AACA;;AACA;;AAEA;;;;;;AAIA,SAASG,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,SAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B;AACAC,IAAAA,KAAK,CAACJ,GAAD,CAAL,CACKK,IADL,CACWC,IAAD,IAAU;AACZ;AACA,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBL,QAAAA,GAAG,CAACI,IAAI,CAACE,IAAL,EAAD,CAAH,CADqB,CAEzB;AACC,OAHD,MAGO;AACHL,QAAAA,GAAG,CAACG,IAAI,CAACG,UAAN,CAAH;AACH;AACJ,KATL,EAUKC,KAVL,CAUYC,GAAD,IAAS;AACZR,MAAAA,GAAG,CAACQ,GAAD,CAAH;AACH,KAZL;AAaH,GAfM,CAAP;AAgBH;AAED;;;;;;AAIA,eAAeC,aAAf,CAA6BhC,UAA7B,EAAyC;AACrC,QAAMiC,YAAY,GAAGxD,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACiB,iBAAV,CAA4BuD,UAA5B,EAAwCrD,IAArD,CAAtC;AACA,QAAMuF,YAAY,GAAGzD,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACiB,iBAAV,CAA4BuD,UAA5B,EAAwCtD,IAArD,CAAtC;AACA,QAAMyF,cAAc,GAAG,MAAMhB,YAAY,CAACc,YAAD,CAAzC;AACA,QAAMG,cAAc,GAAG,MAAMjB,YAAY,CAACe,YAAD,CAAzC;AACA,QAAMjC,aAAa,GAAG;AAClBtD,IAAAA,IAAI,EAAEwF,cADY;AAElBzF,IAAAA,IAAI,EAAE0F;AAFY,GAAtB;AAIA,QAAMC,cAAc,GAAGtC,mBAAmB,CAACC,UAAD,EAAaC,aAAb,CAA1C;AAEA,SAAOoC,cAAP;AACH;AAED;;;;;;AAIA,eAAeC,WAAf,CAA2BtC,UAA3B,EAAuC;AACnC,QAAMiC,YAAY,GAAGxD,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACW,YAAV,CAAuBI,YAApC,CAAtC;AACA,QAAM2F,YAAY,GAAGzD,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACW,YAAV,CAAuBK,YAApC,CAAtC;AACA,QAAM+F,QAAQ,GAAG,MAAMpB,YAAY,CAACc,YAAD,CAAnC;AACA,QAAMO,QAAQ,GAAG,MAAMrB,YAAY,CAACe,YAAD,CAAnC;AACA,QAAMzB,SAAS,GAAG;AACd9D,IAAAA,IAAI,EAAEoC,gBAAgB,CAACwD,QAAD,CADR;AAEd7F,IAAAA,IAAI,EAAEqC,gBAAgB,CAACyD,QAAD;AAFR,GAAlB;AAKA,SAAO/B,SAAP;AACH;AAED;;;;;;AAIA,eAAegC,kBAAf,CAAkCzC,UAAlC,EAA8C;AAC1C,QAAM0C,WAAW,GAAGjE,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACW,YAAV,CAAuBC,SAApC,CAArC;AACA,QAAMuG,SAAS,GAAG,MAAMxB,YAAY,CAACuB,WAAD,CAApC;AACA,QAAMjC,SAAS,GAAG;AACdkB,IAAAA,MAAM,EAAEgB,SAAS,CAAChB,MADJ;AAEdiB,IAAAA,QAAQ,EAAExE,eAAe,CAACuE,SAAS,CAACE,IAAX;AAFX,GAAlB;AAKA,SAAOpC,SAAP;AACH;AAED;;;;;;AAIA,eAAeqC,YAAf,CAA4B9C,UAA5B,EAAwC;AACpC,QAAMiC,YAAY,GAAGxD,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACW,YAAV,CAAuBE,SAApC,CAAtC;AACA,QAAM6F,YAAY,GAAGzD,iBAAiB,CAACuB,UAAD,EAAaxE,SAAS,CAACW,YAAV,CAAuBG,SAApC,CAAtC;AACA,QAAMiG,QAAQ,GAAG,MAAMpB,YAAY,CAACc,YAAD,CAAnC;AACA,QAAMO,QAAQ,GAAG,MAAMrB,YAAY,CAACe,YAAD,CAAnC;AACA,QAAMzB,SAAS,GAAG;AACd9D,IAAAA,IAAI,EAAE4F,QADQ;AAEd7F,IAAAA,IAAI,EAAE8F;AAFQ,GAAlB;AAKA,SAAO/B,SAAP;AACH;AAED;;;;;;;AAKA,eAAesC,YAAf,CAA4B/C,UAA5B,EAAwCgD,QAAxC,EAAkD;AAC9C,MAAIC,OAAO,GAAG;AAAEvG,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,IAAI,EAAE;AAAlB,GAAd;AACA,MAAI+F,WAAW,GAAG,EAAlB;AACA,MAAIQ,UAAJ,CAH8C,CAK9C;;AACA,MAAIF,QAAQ,CAACpH,QAAT,KAAsB,SAA1B,EAAqC;AACjCqH,IAAAA,OAAO,CAACvG,IAAR,GAAe,SAAf;AACH,GAFD,MAEO;AACHgG,IAAAA,WAAW,GAAGjE,iBAAiB,CAACuB,UAAD,EAAagD,QAAQ,CAACpH,QAAtB,CAA/B;AACAsH,IAAAA,UAAU,GAAG,MAAM/B,YAAY,CAACuB,WAAD,CAA/B;;AAEA,QAAIM,QAAQ,CAACnH,WAAb,EAA0B;AACtBoH,MAAAA,OAAO,CAACvG,IAAR,GAAewG,UAAU,CAACF,QAAQ,CAACnH,WAAV,CAAzB;AACH,KAFD,MAEO;AACHoH,MAAAA,OAAO,CAACvG,IAAR,GAAewG,UAAf;AACH;AACJ,GAjB6C,CAmB9C;AACA;;;AACA,MAAIF,QAAQ,CAAClH,QAAT,KAAsB,SAA1B,EAAqC;AACjCmH,IAAAA,OAAO,CAACtG,IAAR,GAAe,SAAf;AACH,GAFD,MAEO;AACH+F,IAAAA,WAAW,GAAGjE,iBAAiB,CAACuB,UAAD,EAAagD,QAAQ,CAAClH,QAAtB,CAA/B;AACAoH,IAAAA,UAAU,GAAG,MAAM/B,YAAY,CAACuB,WAAD,CAA/B;;AAEA,QAAIM,QAAQ,CAACjH,WAAb,EAA0B;AACtBkH,MAAAA,OAAO,CAACtG,IAAR,GAAeuG,UAAU,CAACF,QAAQ,CAACjH,WAAV,CAAzB;AACH,KAFD,MAEO;AACHkH,MAAAA,OAAO,CAACtG,IAAR,GAAeuG,UAAf;AACH;AACJ;;AAED,SAAOD,OAAP;AACH;AAED;;;;;;AAIA,eAAeE,aAAf,CAA6BnD,UAA7B,EAAyC;AACrC,MAAIoD,WAAW,GAAG,EAAlB;AACA,QAAMC,UAAU,GAAG7H,SAAS,CAACC,OAAV,CAAkBuE,UAAlB,EAA8BrE,MAAjD;;AAEA,OAAK,MAAM0C,GAAX,IAAkBgF,UAAlB,EAA8B;AAC1B,UAAMC,OAAO,GAAG3C,MAAM,CAACC,IAAP,CAAYvC,GAAZ,EAAiB,CAAjB,CAAhB;AACA,QAAI4E,OAAO,GAAE,EAAb;AAEA,QAAIM,QAAQ,GAAG,MAAMR,YAAY,CAAC/C,UAAD,EAAa3B,GAAG,CAACiF,OAAD,CAAhB,CAAjC;AACAL,IAAAA,OAAO,CAACK,OAAD,CAAP,GAAmBC,QAAnB;AACAH,IAAAA,WAAW,CAAClC,IAAZ,CAAiB+B,OAAjB;AACH;;AAED,SAAOG,WAAP;AACH;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACb5E,EAAAA,gBAAgB,EAAEA,gBADL;AAEbJ,EAAAA,iBAAiB,EAAEA,iBAFN;AAGb0C,EAAAA,YAAY,EAAEA,YAHD;AAIb/C,EAAAA,eAAe,EAAEA,eAJJ;AAKbW,EAAAA,gBAAgB,EAAEA,gBALL;AAMbI,EAAAA,cAAc,EAAEA,cANH;AAObG,EAAAA,iBAAiB,EAAEA,iBAPN;AAQbS,EAAAA,mBAAmB,EAAEA,mBARR;AASbQ,EAAAA,eAAe,EAAEA,eATJ;AAUbyB,EAAAA,aAAa,EAAEA,aAVF;AAWbM,EAAAA,WAAW,EAAEA,WAXA;AAYbG,EAAAA,kBAAkB,EAAEA,kBAZP;AAabK,EAAAA,YAAY,EAAEA,YAbD;AAcbK,EAAAA,aAAa,EAAEA,aAdF;AAebtC,EAAAA,sBAAsB,EAAEA,sBAfX;AAgBb5C,EAAAA,gBAAgB,EAAEA,gBAhBL;AAiBbT,EAAAA,iBAAiB,EAAEA,iBAjBN;AAkBbR,EAAAA,UAAU,EAAEA,UAlBC;AAmBbJ,EAAAA,WAAW,EAAEA;AAnBA,CAAjB","sourcesContent":["// This is a modified version of what is in constants.js\r\nconst constants = {\r\n    periods: {\r\n        MLB: {\r\n            extras: [\r\n                {\r\n                    'R': {\r\n                        awayStat: 'away_batter_totals',\r\n                        awaySubStat: 'runs',\r\n                        homeStat: 'home_batter_totals',\r\n                        homeSubStat: 'runs'\r\n                    }\r\n                },\r\n                {\r\n                    'H': {\r\n                        awayStat: 'away_batter_totals',\r\n                        awaySubStat: 'hits',\r\n                        homeStat: 'home_batter_totals',\r\n                        homeSubStat: 'hits'\r\n                    }\r\n                },\r\n                {\r\n                    'E': {\r\n                        awayStat: 'away_errors',\r\n                        awaySubStat: 'away_errors',\r\n                        homeStat: 'home_errors',\r\n                        homeSubStat: 'home_errors'\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        NBA: {\r\n            extras: [\r\n                {\r\n                    'T': {\r\n                        awayStat: '<TOTAL>',\r\n                        homeStat: '<TOTAL>',\r\n                        awaySubStat: false,\r\n                        homeSubStat: false\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    playerStats: {\r\n        NBA: {\r\n            searchBy: 'points'\r\n        },\r\n        MLB: {\r\n            searchBy: ['win', 'loss', 'save']\r\n        }\r\n    },\r\n    sharedValues: {\r\n        eventInfo: 'event_information',\r\n        homeScore: 'home_period_scores',\r\n        awayScore: 'away_period_scores',\r\n        homeTeamInfo: 'home_team',\r\n        awayTeamInfo: 'away_team'\r\n    },\r\n    playerIdentifiers: {\r\n        NBA: {\r\n            away: 'away_stats',\r\n            home: 'home_stats',\r\n        },\r\n        MLB: {\r\n            away: 'away_pitchers',\r\n            home: 'home_pitchers'\r\n        }\r\n    }\r\n}\r\n\r\n/* ======================================== */\r\n/*       OBJECT MANIPULATION FUNCTIONS      */\r\n/* ======================================== */\r\n\r\n/**\r\n * @name generateKey\r\n * @param {String} pre some Unique identifier \r\n */\r\nconst generateKey = (str) => {\r\n    return `${str}_${ new Date().getTime() }`;\r\n}\r\n\r\n/**\r\n * @name numReplace\r\n * @param {String} str String to perform replace on \r\n * @param {Number} idx Number to be inserted\r\n */\r\nfunction numReplace(str, idx) {\r\n    if (str.includes('<NUM>')) {\r\n        return str.replace('<NUM>', idx);\r\n    } else {\r\n        return str.replace('<CARDNUM>', getNumberWithOrdinal(idx));\r\n    }\r\n}\r\n\r\n/**\r\n * @name getNumberWithOrdinal\r\n * @param {Number} n Number to convert: 1 ==> 1st \r\n */\r\nfunction getNumberWithOrdinal(n) {\r\n    let s=[\"th\",\"st\",\"nd\",\"rd\"],\r\n    v= n % 100;\r\n    return n + (s[(v-20)%10]||s[v]||s[0]);\r\n }\r\n\r\n/**\r\n * @name createPlayerStats\r\n * @param {Object} playerObj Player Object\r\n * @param {Array} stats Array of stats that interest us \r\n */\r\nfunction createPlayerStats(playerObj, stats) {\r\n    let returnMsg = '';\r\n\r\n    stats.forEach((stat) => {\r\n        if (playerObj[stat]) {\r\n            returnMsg += `${stat.toUpperCase().replace(/_/g, ' ')}: ${playerObj[stat]}, `;\r\n        }\r\n    });\r\n\r\n    if (returnMsg.length > 0) {\r\n        returnMsg = returnMsg.slice(0, -2);\r\n    }\r\n\r\n    return returnMsg;\r\n}\r\n\r\n/**\r\n * @name createPlayerName\r\n */\r\nfunction createPlayerName (name, team) {\r\n    return `${name} (${team})`;\r\n}\r\n\r\n/**\r\n * @name constructLocObj\r\n * @param {Object} obj Location object \r\n */\r\nfunction constructLocObj(obj) {\r\n    return {\r\n        name: `${obj.city}, ${obj.state}`,\r\n        stadium: obj.name\r\n    };\r\n}\r\n\r\n/**\r\n * @name apiURLConstructor\r\n * @param {String} league NBA vs. MLB\r\n * @param {String} typeOfStat What aggregator stat would you like\r\n */\r\nfunction apiURLConstructor(league, typeOfStat) {\r\n    let baseURL = '/api/games';\r\n\r\n    if (league) {\r\n        baseURL += `/${league.toUpperCase()}`;\r\n    }\r\n\r\n    if (typeOfStat) {\r\n        baseURL += `?stats=${typeOfStat}`;\r\n    }\r\n\r\n    return baseURL;\r\n}\r\n\r\n/**\r\n * @name capitalizeString\r\n * @param {String} str String to capitalize \r\n */\r\nfunction capitalizeString(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n/**\r\n * @name constructTeamObj\r\n * @param {Object} obj Object of team properties \r\n */\r\nfunction constructTeamObj(obj) {\r\n    return {\r\n        name: obj.full_name,\r\n        abbv: obj.abbreviation\r\n    };\r\n}\r\n\r\n/**\r\n * @name statComparison\r\n * @param {Object} a Player A\r\n * @param {Object} b Player B \r\n * @param {String} stat Stat of interest \r\n */\r\nfunction statComparison(a, b, stat) {\r\n    if (b[stat] > a[stat]) {\r\n        return 1;\r\n    } else if (a[stat] > b[stat]) {\r\n        return -1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @name getNHighestTotals\r\n * @param {Array} arr1 Array of team players \r\n * @param {Array} arr2 Array of team players\r\n * @param {String} stat Stat of interest\r\n * @param {Number} n How many players to limit the result by\r\n */\r\nfunction getNHighestTotals(arr1, arr2, stat, n) {\r\n    const totalPlayers = arr1.concat(arr2);\r\n\r\n    return totalPlayers\r\n        .sort((a, b) => statComparison(a, b, stat))\r\n        .slice()\r\n        .filter((val, i) => {\r\n            return i < n;\r\n        });\r\n}\r\n\r\n/**\r\n * @name createPlayerDataObj\r\n * @param {String} leagueType MLB vs. NBA\r\n * @param {Object} playerDataObj Player Object\r\n */\r\nasync function createPlayerDataObj(leagueType, playerDataObj) {\r\n    const statToFind = constants.playerStats[leagueType].searchBy;\r\n\r\n    if (!Array.isArray(statToFind)) {\r\n        const rankedPlayers = getNHighestTotals(playerDataObj.home, playerDataObj.away, statToFind, 3);\r\n        \r\n        // This returns an array (STAT Player aka dont care about wins or saves, etc.)\r\n        return rankedPlayers\r\n    } else {\r\n        const players = findPlayerStats(statToFind, playerDataObj.home, playerDataObj.away);\r\n\r\n        // This returns an object (CATEGORY Player aka we do care about wins or saves, etc.)\r\n        return players;\r\n    }\r\n}\r\n\r\n/**\r\n * @name findPlayerStats\r\n * @param {Array} statsArr Array of statistics that interest us \r\n * @param {Array} arr1 Array of Players from team A\r\n * @param {Array} arr2 Array of Players from team B \r\n */\r\nfunction findPlayerStats(statsArr, arr1, arr2) {\r\n    const totalPlayers = arr1.concat(arr2);\r\n    let returnObj = {};\r\n\r\n    // We Assume that you look for 3 stats...\r\n    // TODO::: don't make this assumption\r\n    for (let entry of totalPlayers) {\r\n        if (entry[statsArr[0]]) {\r\n            returnObj[statsArr[0]] = entry;\r\n        } else if (entry[statsArr[1]]) {\r\n            returnObj[statsArr[1]] = entry;\r\n        } else if (entry[statsArr[2]]) {\r\n            returnObj[statsArr[2]] = entry;\r\n        }\r\n\r\n        // Max amount we can give back\r\n        if (Object.keys(returnObj).length === 3) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return returnObj;\r\n}\r\n\r\n/**\r\n * @name generateTeamStatsArray\r\n * @param {Array} arr Array of Stat Objects\r\n * @param {String} teamType MLB vs. NBA\r\n */\r\nfunction generateTeamStatsArray(arr, teamType) {\r\n    let returnArr = [];\r\n\r\n    for (const obj of arr) {\r\n        let key = Object.keys(obj)[0];\r\n\r\n        returnArr.push(obj[key][teamType]);\r\n    }\r\n\r\n    return returnArr;\r\n}\r\n\r\n/* ======================================== */\r\n/*   ASYNC STUFF THAT TOUCHES OUR BACKEND   */\r\n/* ======================================== */\r\n\r\n/**\r\n * @name fetchUrlData\r\n * @param {String} url API endpoint to hit\r\n */\r\nfunction fetchUrlData(url) {\r\n    return new Promise((res, rej) => {\r\n        // Get our endpoint data\r\n        fetch(url)\r\n            .then((resp) => {\r\n                // If it came back propertly, return it\r\n                if (resp.status === 200) {\r\n                    res(resp.json());\r\n                // Otherwise send the error\r\n                } else {\r\n                    rej(resp.statusText);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                rej(err);\r\n            });\r\n    });\r\n}\r\n\r\n/**\r\n * @name getPlayerInfo\r\n * @param {String} leagueType MLB vs. NBA\r\n */\r\nasync function getPlayerInfo(leagueType) {\r\n    const homeEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].home);\r\n    const awayEndpoint = apiURLConstructor(leagueType, constants.playerIdentifiers[leagueType].away);\r\n    const homePlayerData = await fetchUrlData(homeEndpoint);\r\n    const awayPlayerData = await fetchUrlData(awayEndpoint);\r\n    const playerDataObj = {\r\n        home: homePlayerData,\r\n        away: awayPlayerData\r\n    };\r\n    const finalPlayerObj = createPlayerDataObj(leagueType, playerDataObj);\r\n\r\n    return finalPlayerObj;\r\n}\r\n\r\n/**\r\n * @name getTeamInfo\r\n * @param {String} leagueType MLB vs. NBA\r\n */\r\nasync function getTeamInfo(leagueType) {\r\n    const homeEndpoint = apiURLConstructor(leagueType, constants.sharedValues.homeTeamInfo);\r\n    const awayEndpoint = apiURLConstructor(leagueType, constants.sharedValues.awayTeamInfo);\r\n    const homeData = await fetchUrlData(homeEndpoint);\r\n    const awayData = await fetchUrlData(awayEndpoint);\r\n    const returnObj = {\r\n        home: constructTeamObj(homeData),\r\n        away: constructTeamObj(awayData)\r\n    }\r\n\r\n    return returnObj;\r\n}\r\n\r\n/**\r\n * @name getGameInformation\r\n * @param {String} leagueType MLB vs. NBA\r\n */\r\nasync function getGameInformation(leagueType) {\r\n    const apiEndpoint = apiURLConstructor(leagueType, constants.sharedValues.eventInfo)\r\n    const eventData = await fetchUrlData(apiEndpoint);\r\n    const returnObj = {\r\n        status: eventData.status,\r\n        location: constructLocObj(eventData.site)\r\n    };\r\n\r\n    return returnObj\r\n}\r\n\r\n/**\r\n * @name getGameScore\r\n * @param {String} leagueType MLB vs. NBA\r\n */\r\nasync function getGameScore(leagueType) {\r\n    const homeEndpoint = apiURLConstructor(leagueType, constants.sharedValues.homeScore);\r\n    const awayEndpoint = apiURLConstructor(leagueType, constants.sharedValues.awayScore);\r\n    const homeData = await fetchUrlData(homeEndpoint);\r\n    const awayData = await fetchUrlData(awayEndpoint);\r\n    const returnObj = {\r\n        home: homeData,\r\n        away: awayData\r\n    }\r\n\r\n    return returnObj;\r\n}\r\n\r\n/**\r\n * @name getTeamStats\r\n * @param {String} leagueType MLB vs. NBA\r\n * @param {Object} stateObj Stats that interest us\r\n */\r\nasync function getTeamStats(leagueType, stateObj) {\r\n    let tempObj = { away: {}, home: {} };\r\n    let apiEndpoint = '';\r\n    let returnData;\r\n\r\n    // Get Away Stats\r\n    if (stateObj.awayStat === '<TOTAL>') {\r\n        tempObj.away = '<TOTAL>';\r\n    } else {\r\n        apiEndpoint = apiURLConstructor(leagueType, stateObj.awayStat);\r\n        returnData = await fetchUrlData(apiEndpoint);\r\n\r\n        if (stateObj.awaySubStat) {\r\n            tempObj.away = returnData[stateObj.awaySubStat];\r\n        } else {\r\n            tempObj.away = returnData;\r\n        }\r\n    }\r\n\r\n    // TODO::: combine home and away logic\r\n    // Get Home Stats\r\n    if (stateObj.homeStat === '<TOTAL>') {\r\n        tempObj.home = '<TOTAL>';\r\n    } else {\r\n        apiEndpoint = apiURLConstructor(leagueType, stateObj.homeStat);\r\n        returnData = await fetchUrlData(apiEndpoint);\r\n\r\n        if (stateObj.homeSubStat) {\r\n            tempObj.home = returnData[stateObj.homeSubStat];\r\n        } else {\r\n            tempObj.home = returnData;\r\n        }\r\n    }\r\n\r\n    return tempObj;\r\n}\r\n\r\n/**\r\n * @name getExtraStats\r\n * @param {String} leagueType MLB vs. NBA \r\n */\r\nasync function getExtraStats(leagueType) {\r\n    let returnStats = [];\r\n    const extraStats = constants.periods[leagueType].extras;\r\n\r\n    for (const obj of extraStats) {\r\n        const statKey = Object.keys(obj)[0];\r\n        let tempObj ={};\r\n\r\n        let tempData = await getTeamStats(leagueType, obj[statKey]);\r\n        tempObj[statKey] = tempData;\r\n        returnStats.push(tempObj);\r\n    }\r\n\r\n    return returnStats;\r\n}\r\n\r\nmodule.exports = {\r\n    capitalizeString: capitalizeString,\r\n    apiURLConstructor: apiURLConstructor,\r\n    fetchUrlData: fetchUrlData,\r\n    constructLocObj: constructLocObj,\r\n    constructTeamObj: constructTeamObj,\r\n    statComparison: statComparison,\r\n    getNHighestTotals: getNHighestTotals,\r\n    createPlayerDataObj: createPlayerDataObj,\r\n    findPlayerStats: findPlayerStats,\r\n    getPlayerInfo: getPlayerInfo,\r\n    getTeamInfo: getTeamInfo,\r\n    getGameInformation: getGameInformation,\r\n    getGameScore: getGameScore,\r\n    getExtraStats: getExtraStats,\r\n    generateTeamStatsArray: generateTeamStatsArray,\r\n    createPlayerName: createPlayerName,\r\n    createPlayerStats: createPlayerStats,\r\n    numReplace: numReplace,\r\n    generateKey: generateKey\r\n}"]},"metadata":{},"sourceType":"module"}